
TIMER0_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000086c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000005  00800060  00800060  000008e0  2**0
                  ALLOC
  2 .stab         00000a2c  00000000  00000000  000008e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000548  00000000  00000000  0000130c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 ac 03 	jmp	0x758	; 0x758 <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a5 36       	cpi	r26, 0x65	; 101
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 f5 03 	call	0x7ea	; 0x7ea <main>
  74:	0c 94 34 04 	jmp	0x868	; 0x868 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_voidSetPinDir>:
#include "DIO_config.h"
#include "DIO_register.h"
#include "DIO_private.h"


void DIO_voidSetPinDir(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Dir){
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
  84:	27 97       	sbiw	r28, 0x07	; 7
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	f8 94       	cli
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	0f be       	out	0x3f, r0	; 63
  8e:	cd bf       	out	0x3d, r28	; 61
  90:	89 83       	std	Y+1, r24	; 0x01
  92:	6a 83       	std	Y+2, r22	; 0x02
  94:	4b 83       	std	Y+3, r20	; 0x03

	if(Copy_u8Dir==DIO_u8INPUT){
  96:	8b 81       	ldd	r24, Y+3	; 0x03
  98:	88 23       	and	r24, r24
  9a:	09 f0       	breq	.+2      	; 0x9e <DIO_voidSetPinDir+0x22>
  9c:	75 c0       	rjmp	.+234    	; 0x188 <DIO_voidSetPinDir+0x10c>
		switch(Copy_u8Port)
  9e:	89 81       	ldd	r24, Y+1	; 0x01
  a0:	28 2f       	mov	r18, r24
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	3f 83       	std	Y+7, r19	; 0x07
  a6:	2e 83       	std	Y+6, r18	; 0x06
  a8:	8e 81       	ldd	r24, Y+6	; 0x06
  aa:	9f 81       	ldd	r25, Y+7	; 0x07
  ac:	82 30       	cpi	r24, 0x02	; 2
  ae:	91 05       	cpc	r25, r1
  b0:	61 f1       	breq	.+88     	; 0x10a <DIO_voidSetPinDir+0x8e>
  b2:	2e 81       	ldd	r18, Y+6	; 0x06
  b4:	3f 81       	ldd	r19, Y+7	; 0x07
  b6:	23 30       	cpi	r18, 0x03	; 3
  b8:	31 05       	cpc	r19, r1
  ba:	34 f4       	brge	.+12     	; 0xc8 <DIO_voidSetPinDir+0x4c>
  bc:	8e 81       	ldd	r24, Y+6	; 0x06
  be:	9f 81       	ldd	r25, Y+7	; 0x07
  c0:	81 30       	cpi	r24, 0x01	; 1
  c2:	91 05       	cpc	r25, r1
  c4:	69 f0       	breq	.+26     	; 0xe0 <DIO_voidSetPinDir+0x64>
  c6:	d3 c0       	rjmp	.+422    	; 0x26e <DIO_voidSetPinDir+0x1f2>
  c8:	2e 81       	ldd	r18, Y+6	; 0x06
  ca:	3f 81       	ldd	r19, Y+7	; 0x07
  cc:	23 30       	cpi	r18, 0x03	; 3
  ce:	31 05       	cpc	r19, r1
  d0:	89 f1       	breq	.+98     	; 0x134 <DIO_voidSetPinDir+0xb8>
  d2:	8e 81       	ldd	r24, Y+6	; 0x06
  d4:	9f 81       	ldd	r25, Y+7	; 0x07
  d6:	84 30       	cpi	r24, 0x04	; 4
  d8:	91 05       	cpc	r25, r1
  da:	09 f4       	brne	.+2      	; 0xde <DIO_voidSetPinDir+0x62>
  dc:	40 c0       	rjmp	.+128    	; 0x15e <DIO_voidSetPinDir+0xe2>
  de:	c7 c0       	rjmp	.+398    	; 0x26e <DIO_voidSetPinDir+0x1f2>
		{

			case DIO_u8PORTA :ClR_BIT(DDRA,Copy_u8Pin); break;
  e0:	aa e3       	ldi	r26, 0x3A	; 58
  e2:	b0 e0       	ldi	r27, 0x00	; 0
  e4:	ea e3       	ldi	r30, 0x3A	; 58
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	48 2f       	mov	r20, r24
  ec:	8a 81       	ldd	r24, Y+2	; 0x02
  ee:	28 2f       	mov	r18, r24
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	02 2e       	mov	r0, r18
  f8:	02 c0       	rjmp	.+4      	; 0xfe <DIO_voidSetPinDir+0x82>
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	0a 94       	dec	r0
 100:	e2 f7       	brpl	.-8      	; 0xfa <DIO_voidSetPinDir+0x7e>
 102:	80 95       	com	r24
 104:	84 23       	and	r24, r20
 106:	8c 93       	st	X, r24
 108:	b2 c0       	rjmp	.+356    	; 0x26e <DIO_voidSetPinDir+0x1f2>
			case DIO_u8PORTB :ClR_BIT(DDRB,Copy_u8Pin); break;
 10a:	a7 e3       	ldi	r26, 0x37	; 55
 10c:	b0 e0       	ldi	r27, 0x00	; 0
 10e:	e7 e3       	ldi	r30, 0x37	; 55
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	48 2f       	mov	r20, r24
 116:	8a 81       	ldd	r24, Y+2	; 0x02
 118:	28 2f       	mov	r18, r24
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	02 2e       	mov	r0, r18
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_voidSetPinDir+0xac>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	0a 94       	dec	r0
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_voidSetPinDir+0xa8>
 12c:	80 95       	com	r24
 12e:	84 23       	and	r24, r20
 130:	8c 93       	st	X, r24
 132:	9d c0       	rjmp	.+314    	; 0x26e <DIO_voidSetPinDir+0x1f2>
			case DIO_u8PORTC :ClR_BIT(DDRC,Copy_u8Pin); break;
 134:	a4 e3       	ldi	r26, 0x34	; 52
 136:	b0 e0       	ldi	r27, 0x00	; 0
 138:	e4 e3       	ldi	r30, 0x34	; 52
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	48 2f       	mov	r20, r24
 140:	8a 81       	ldd	r24, Y+2	; 0x02
 142:	28 2f       	mov	r18, r24
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	02 2e       	mov	r0, r18
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_voidSetPinDir+0xd6>
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	0a 94       	dec	r0
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_voidSetPinDir+0xd2>
 156:	80 95       	com	r24
 158:	84 23       	and	r24, r20
 15a:	8c 93       	st	X, r24
 15c:	88 c0       	rjmp	.+272    	; 0x26e <DIO_voidSetPinDir+0x1f2>
			case DIO_u8PORTD :ClR_BIT(DDRD,Copy_u8Pin); break;
 15e:	a1 e3       	ldi	r26, 0x31	; 49
 160:	b0 e0       	ldi	r27, 0x00	; 0
 162:	e1 e3       	ldi	r30, 0x31	; 49
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	48 2f       	mov	r20, r24
 16a:	8a 81       	ldd	r24, Y+2	; 0x02
 16c:	28 2f       	mov	r18, r24
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 2e       	mov	r0, r18
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_voidSetPinDir+0x100>
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	0a 94       	dec	r0
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_voidSetPinDir+0xfc>
 180:	80 95       	com	r24
 182:	84 23       	and	r24, r20
 184:	8c 93       	st	X, r24
 186:	73 c0       	rjmp	.+230    	; 0x26e <DIO_voidSetPinDir+0x1f2>
		}
	}
	else if(Copy_u8Dir==DIO_u8OUTPUT){
 188:	8b 81       	ldd	r24, Y+3	; 0x03
 18a:	81 30       	cpi	r24, 0x01	; 1
 18c:	09 f0       	breq	.+2      	; 0x190 <DIO_voidSetPinDir+0x114>
 18e:	6f c0       	rjmp	.+222    	; 0x26e <DIO_voidSetPinDir+0x1f2>
		switch(Copy_u8Port){
 190:	89 81       	ldd	r24, Y+1	; 0x01
 192:	28 2f       	mov	r18, r24
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	3d 83       	std	Y+5, r19	; 0x05
 198:	2c 83       	std	Y+4, r18	; 0x04
 19a:	8c 81       	ldd	r24, Y+4	; 0x04
 19c:	9d 81       	ldd	r25, Y+5	; 0x05
 19e:	82 30       	cpi	r24, 0x02	; 2
 1a0:	91 05       	cpc	r25, r1
 1a2:	51 f1       	breq	.+84     	; 0x1f8 <DIO_voidSetPinDir+0x17c>
 1a4:	2c 81       	ldd	r18, Y+4	; 0x04
 1a6:	3d 81       	ldd	r19, Y+5	; 0x05
 1a8:	23 30       	cpi	r18, 0x03	; 3
 1aa:	31 05       	cpc	r19, r1
 1ac:	34 f4       	brge	.+12     	; 0x1ba <DIO_voidSetPinDir+0x13e>
 1ae:	8c 81       	ldd	r24, Y+4	; 0x04
 1b0:	9d 81       	ldd	r25, Y+5	; 0x05
 1b2:	81 30       	cpi	r24, 0x01	; 1
 1b4:	91 05       	cpc	r25, r1
 1b6:	61 f0       	breq	.+24     	; 0x1d0 <DIO_voidSetPinDir+0x154>
 1b8:	5a c0       	rjmp	.+180    	; 0x26e <DIO_voidSetPinDir+0x1f2>
 1ba:	2c 81       	ldd	r18, Y+4	; 0x04
 1bc:	3d 81       	ldd	r19, Y+5	; 0x05
 1be:	23 30       	cpi	r18, 0x03	; 3
 1c0:	31 05       	cpc	r19, r1
 1c2:	71 f1       	breq	.+92     	; 0x220 <DIO_voidSetPinDir+0x1a4>
 1c4:	8c 81       	ldd	r24, Y+4	; 0x04
 1c6:	9d 81       	ldd	r25, Y+5	; 0x05
 1c8:	84 30       	cpi	r24, 0x04	; 4
 1ca:	91 05       	cpc	r25, r1
 1cc:	e9 f1       	breq	.+122    	; 0x248 <DIO_voidSetPinDir+0x1cc>
 1ce:	4f c0       	rjmp	.+158    	; 0x26e <DIO_voidSetPinDir+0x1f2>

			case DIO_u8PORTA: SET_BIT(DDRA , Copy_u8Pin); break;
 1d0:	aa e3       	ldi	r26, 0x3A	; 58
 1d2:	b0 e0       	ldi	r27, 0x00	; 0
 1d4:	ea e3       	ldi	r30, 0x3A	; 58
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	80 81       	ld	r24, Z
 1da:	48 2f       	mov	r20, r24
 1dc:	8a 81       	ldd	r24, Y+2	; 0x02
 1de:	28 2f       	mov	r18, r24
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	02 2e       	mov	r0, r18
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_voidSetPinDir+0x172>
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	0a 94       	dec	r0
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO_voidSetPinDir+0x16e>
 1f2:	84 2b       	or	r24, r20
 1f4:	8c 93       	st	X, r24
 1f6:	3b c0       	rjmp	.+118    	; 0x26e <DIO_voidSetPinDir+0x1f2>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin);
 1f8:	a7 e3       	ldi	r26, 0x37	; 55
 1fa:	b0 e0       	ldi	r27, 0x00	; 0
 1fc:	e7 e3       	ldi	r30, 0x37	; 55
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	48 2f       	mov	r20, r24
 204:	8a 81       	ldd	r24, Y+2	; 0x02
 206:	28 2f       	mov	r18, r24
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	02 2e       	mov	r0, r18
 210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_voidSetPinDir+0x19a>
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	0a 94       	dec	r0
 218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_voidSetPinDir+0x196>
 21a:	84 2b       	or	r24, r20
 21c:	8c 93       	st	X, r24
 21e:	27 c0       	rjmp	.+78     	; 0x26e <DIO_voidSetPinDir+0x1f2>
			break;
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin);
 220:	a4 e3       	ldi	r26, 0x34	; 52
 222:	b0 e0       	ldi	r27, 0x00	; 0
 224:	e4 e3       	ldi	r30, 0x34	; 52
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	80 81       	ld	r24, Z
 22a:	48 2f       	mov	r20, r24
 22c:	8a 81       	ldd	r24, Y+2	; 0x02
 22e:	28 2f       	mov	r18, r24
 230:	30 e0       	ldi	r19, 0x00	; 0
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	02 2e       	mov	r0, r18
 238:	02 c0       	rjmp	.+4      	; 0x23e <DIO_voidSetPinDir+0x1c2>
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	0a 94       	dec	r0
 240:	e2 f7       	brpl	.-8      	; 0x23a <DIO_voidSetPinDir+0x1be>
 242:	84 2b       	or	r24, r20
 244:	8c 93       	st	X, r24
 246:	13 c0       	rjmp	.+38     	; 0x26e <DIO_voidSetPinDir+0x1f2>
			break;
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin);
 248:	a1 e3       	ldi	r26, 0x31	; 49
 24a:	b0 e0       	ldi	r27, 0x00	; 0
 24c:	e1 e3       	ldi	r30, 0x31	; 49
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	80 81       	ld	r24, Z
 252:	48 2f       	mov	r20, r24
 254:	8a 81       	ldd	r24, Y+2	; 0x02
 256:	28 2f       	mov	r18, r24
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	02 2e       	mov	r0, r18
 260:	02 c0       	rjmp	.+4      	; 0x266 <DIO_voidSetPinDir+0x1ea>
 262:	88 0f       	add	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	0a 94       	dec	r0
 268:	e2 f7       	brpl	.-8      	; 0x262 <DIO_voidSetPinDir+0x1e6>
 26a:	84 2b       	or	r24, r20
 26c:	8c 93       	st	X, r24
			break;
		}
	}

}
 26e:	27 96       	adiw	r28, 0x07	; 7
 270:	0f b6       	in	r0, 0x3f	; 63
 272:	f8 94       	cli
 274:	de bf       	out	0x3e, r29	; 62
 276:	0f be       	out	0x3f, r0	; 63
 278:	cd bf       	out	0x3d, r28	; 61
 27a:	cf 91       	pop	r28
 27c:	df 91       	pop	r29
 27e:	08 95       	ret

00000280 <DIO_voidSetPinValue>:
void DIO_voidSetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value){
 280:	df 93       	push	r29
 282:	cf 93       	push	r28
 284:	cd b7       	in	r28, 0x3d	; 61
 286:	de b7       	in	r29, 0x3e	; 62
 288:	27 97       	sbiw	r28, 0x07	; 7
 28a:	0f b6       	in	r0, 0x3f	; 63
 28c:	f8 94       	cli
 28e:	de bf       	out	0x3e, r29	; 62
 290:	0f be       	out	0x3f, r0	; 63
 292:	cd bf       	out	0x3d, r28	; 61
 294:	89 83       	std	Y+1, r24	; 0x01
 296:	6a 83       	std	Y+2, r22	; 0x02
 298:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Value==DIO_u8HIGH){
 29a:	8b 81       	ldd	r24, Y+3	; 0x03
 29c:	81 30       	cpi	r24, 0x01	; 1
 29e:	09 f0       	breq	.+2      	; 0x2a2 <DIO_voidSetPinValue+0x22>
 2a0:	70 c0       	rjmp	.+224    	; 0x382 <DIO_voidSetPinValue+0x102>
		switch(Copy_u8Port){
 2a2:	89 81       	ldd	r24, Y+1	; 0x01
 2a4:	28 2f       	mov	r18, r24
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	3f 83       	std	Y+7, r19	; 0x07
 2aa:	2e 83       	std	Y+6, r18	; 0x06
 2ac:	8e 81       	ldd	r24, Y+6	; 0x06
 2ae:	9f 81       	ldd	r25, Y+7	; 0x07
 2b0:	82 30       	cpi	r24, 0x02	; 2
 2b2:	91 05       	cpc	r25, r1
 2b4:	51 f1       	breq	.+84     	; 0x30a <DIO_voidSetPinValue+0x8a>
 2b6:	2e 81       	ldd	r18, Y+6	; 0x06
 2b8:	3f 81       	ldd	r19, Y+7	; 0x07
 2ba:	23 30       	cpi	r18, 0x03	; 3
 2bc:	31 05       	cpc	r19, r1
 2be:	34 f4       	brge	.+12     	; 0x2cc <DIO_voidSetPinValue+0x4c>
 2c0:	8e 81       	ldd	r24, Y+6	; 0x06
 2c2:	9f 81       	ldd	r25, Y+7	; 0x07
 2c4:	81 30       	cpi	r24, 0x01	; 1
 2c6:	91 05       	cpc	r25, r1
 2c8:	61 f0       	breq	.+24     	; 0x2e2 <DIO_voidSetPinValue+0x62>
 2ca:	d3 c0       	rjmp	.+422    	; 0x472 <DIO_voidSetPinValue+0x1f2>
 2cc:	2e 81       	ldd	r18, Y+6	; 0x06
 2ce:	3f 81       	ldd	r19, Y+7	; 0x07
 2d0:	23 30       	cpi	r18, 0x03	; 3
 2d2:	31 05       	cpc	r19, r1
 2d4:	71 f1       	breq	.+92     	; 0x332 <DIO_voidSetPinValue+0xb2>
 2d6:	8e 81       	ldd	r24, Y+6	; 0x06
 2d8:	9f 81       	ldd	r25, Y+7	; 0x07
 2da:	84 30       	cpi	r24, 0x04	; 4
 2dc:	91 05       	cpc	r25, r1
 2de:	e9 f1       	breq	.+122    	; 0x35a <DIO_voidSetPinValue+0xda>
 2e0:	c8 c0       	rjmp	.+400    	; 0x472 <DIO_voidSetPinValue+0x1f2>
			case DIO_u8PORTA:SET_BIT(PORTA,Copy_u8Pin);
 2e2:	ab e3       	ldi	r26, 0x3B	; 59
 2e4:	b0 e0       	ldi	r27, 0x00	; 0
 2e6:	eb e3       	ldi	r30, 0x3B	; 59
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	80 81       	ld	r24, Z
 2ec:	48 2f       	mov	r20, r24
 2ee:	8a 81       	ldd	r24, Y+2	; 0x02
 2f0:	28 2f       	mov	r18, r24
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	02 2e       	mov	r0, r18
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <DIO_voidSetPinValue+0x80>
 2fc:	88 0f       	add	r24, r24
 2fe:	99 1f       	adc	r25, r25
 300:	0a 94       	dec	r0
 302:	e2 f7       	brpl	.-8      	; 0x2fc <DIO_voidSetPinValue+0x7c>
 304:	84 2b       	or	r24, r20
 306:	8c 93       	st	X, r24
 308:	b4 c0       	rjmp	.+360    	; 0x472 <DIO_voidSetPinValue+0x1f2>
			break;
			case DIO_u8PORTB:SET_BIT(PORTB,Copy_u8Pin);
 30a:	a8 e3       	ldi	r26, 0x38	; 56
 30c:	b0 e0       	ldi	r27, 0x00	; 0
 30e:	e8 e3       	ldi	r30, 0x38	; 56
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	80 81       	ld	r24, Z
 314:	48 2f       	mov	r20, r24
 316:	8a 81       	ldd	r24, Y+2	; 0x02
 318:	28 2f       	mov	r18, r24
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	02 2e       	mov	r0, r18
 322:	02 c0       	rjmp	.+4      	; 0x328 <DIO_voidSetPinValue+0xa8>
 324:	88 0f       	add	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	0a 94       	dec	r0
 32a:	e2 f7       	brpl	.-8      	; 0x324 <DIO_voidSetPinValue+0xa4>
 32c:	84 2b       	or	r24, r20
 32e:	8c 93       	st	X, r24
 330:	a0 c0       	rjmp	.+320    	; 0x472 <DIO_voidSetPinValue+0x1f2>
			break;
			case DIO_u8PORTC:SET_BIT(PORTC,Copy_u8Pin);
 332:	a5 e3       	ldi	r26, 0x35	; 53
 334:	b0 e0       	ldi	r27, 0x00	; 0
 336:	e5 e3       	ldi	r30, 0x35	; 53
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	80 81       	ld	r24, Z
 33c:	48 2f       	mov	r20, r24
 33e:	8a 81       	ldd	r24, Y+2	; 0x02
 340:	28 2f       	mov	r18, r24
 342:	30 e0       	ldi	r19, 0x00	; 0
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	02 2e       	mov	r0, r18
 34a:	02 c0       	rjmp	.+4      	; 0x350 <DIO_voidSetPinValue+0xd0>
 34c:	88 0f       	add	r24, r24
 34e:	99 1f       	adc	r25, r25
 350:	0a 94       	dec	r0
 352:	e2 f7       	brpl	.-8      	; 0x34c <DIO_voidSetPinValue+0xcc>
 354:	84 2b       	or	r24, r20
 356:	8c 93       	st	X, r24
 358:	8c c0       	rjmp	.+280    	; 0x472 <DIO_voidSetPinValue+0x1f2>
			break;
			case DIO_u8PORTD:SET_BIT(PORTD,Copy_u8Pin); break;
 35a:	a2 e3       	ldi	r26, 0x32	; 50
 35c:	b0 e0       	ldi	r27, 0x00	; 0
 35e:	e2 e3       	ldi	r30, 0x32	; 50
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	80 81       	ld	r24, Z
 364:	48 2f       	mov	r20, r24
 366:	8a 81       	ldd	r24, Y+2	; 0x02
 368:	28 2f       	mov	r18, r24
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	02 2e       	mov	r0, r18
 372:	02 c0       	rjmp	.+4      	; 0x378 <DIO_voidSetPinValue+0xf8>
 374:	88 0f       	add	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	0a 94       	dec	r0
 37a:	e2 f7       	brpl	.-8      	; 0x374 <DIO_voidSetPinValue+0xf4>
 37c:	84 2b       	or	r24, r20
 37e:	8c 93       	st	X, r24
 380:	78 c0       	rjmp	.+240    	; 0x472 <DIO_voidSetPinValue+0x1f2>
		}
	}
	else if(Copy_u8Value==DIO_u8LOW){
 382:	8b 81       	ldd	r24, Y+3	; 0x03
 384:	88 23       	and	r24, r24
 386:	09 f0       	breq	.+2      	; 0x38a <DIO_voidSetPinValue+0x10a>
 388:	74 c0       	rjmp	.+232    	; 0x472 <DIO_voidSetPinValue+0x1f2>
		switch(Copy_u8Port){
 38a:	89 81       	ldd	r24, Y+1	; 0x01
 38c:	28 2f       	mov	r18, r24
 38e:	30 e0       	ldi	r19, 0x00	; 0
 390:	3d 83       	std	Y+5, r19	; 0x05
 392:	2c 83       	std	Y+4, r18	; 0x04
 394:	8c 81       	ldd	r24, Y+4	; 0x04
 396:	9d 81       	ldd	r25, Y+5	; 0x05
 398:	82 30       	cpi	r24, 0x02	; 2
 39a:	91 05       	cpc	r25, r1
 39c:	61 f1       	breq	.+88     	; 0x3f6 <DIO_voidSetPinValue+0x176>
 39e:	2c 81       	ldd	r18, Y+4	; 0x04
 3a0:	3d 81       	ldd	r19, Y+5	; 0x05
 3a2:	23 30       	cpi	r18, 0x03	; 3
 3a4:	31 05       	cpc	r19, r1
 3a6:	34 f4       	brge	.+12     	; 0x3b4 <DIO_voidSetPinValue+0x134>
 3a8:	8c 81       	ldd	r24, Y+4	; 0x04
 3aa:	9d 81       	ldd	r25, Y+5	; 0x05
 3ac:	81 30       	cpi	r24, 0x01	; 1
 3ae:	91 05       	cpc	r25, r1
 3b0:	69 f0       	breq	.+26     	; 0x3cc <DIO_voidSetPinValue+0x14c>
 3b2:	5f c0       	rjmp	.+190    	; 0x472 <DIO_voidSetPinValue+0x1f2>
 3b4:	2c 81       	ldd	r18, Y+4	; 0x04
 3b6:	3d 81       	ldd	r19, Y+5	; 0x05
 3b8:	23 30       	cpi	r18, 0x03	; 3
 3ba:	31 05       	cpc	r19, r1
 3bc:	89 f1       	breq	.+98     	; 0x420 <DIO_voidSetPinValue+0x1a0>
 3be:	8c 81       	ldd	r24, Y+4	; 0x04
 3c0:	9d 81       	ldd	r25, Y+5	; 0x05
 3c2:	84 30       	cpi	r24, 0x04	; 4
 3c4:	91 05       	cpc	r25, r1
 3c6:	09 f4       	brne	.+2      	; 0x3ca <DIO_voidSetPinValue+0x14a>
 3c8:	40 c0       	rjmp	.+128    	; 0x44a <DIO_voidSetPinValue+0x1ca>
 3ca:	53 c0       	rjmp	.+166    	; 0x472 <DIO_voidSetPinValue+0x1f2>
			case DIO_u8PORTA:ClR_BIT(PORTA,Copy_u8Pin);
 3cc:	ab e3       	ldi	r26, 0x3B	; 59
 3ce:	b0 e0       	ldi	r27, 0x00	; 0
 3d0:	eb e3       	ldi	r30, 0x3B	; 59
 3d2:	f0 e0       	ldi	r31, 0x00	; 0
 3d4:	80 81       	ld	r24, Z
 3d6:	48 2f       	mov	r20, r24
 3d8:	8a 81       	ldd	r24, Y+2	; 0x02
 3da:	28 2f       	mov	r18, r24
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	02 2e       	mov	r0, r18
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <DIO_voidSetPinValue+0x16a>
 3e6:	88 0f       	add	r24, r24
 3e8:	99 1f       	adc	r25, r25
 3ea:	0a 94       	dec	r0
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <DIO_voidSetPinValue+0x166>
 3ee:	80 95       	com	r24
 3f0:	84 23       	and	r24, r20
 3f2:	8c 93       	st	X, r24
 3f4:	3e c0       	rjmp	.+124    	; 0x472 <DIO_voidSetPinValue+0x1f2>
			break;
			case DIO_u8PORTB:ClR_BIT(PORTB,Copy_u8Pin);
 3f6:	a8 e3       	ldi	r26, 0x38	; 56
 3f8:	b0 e0       	ldi	r27, 0x00	; 0
 3fa:	e8 e3       	ldi	r30, 0x38	; 56
 3fc:	f0 e0       	ldi	r31, 0x00	; 0
 3fe:	80 81       	ld	r24, Z
 400:	48 2f       	mov	r20, r24
 402:	8a 81       	ldd	r24, Y+2	; 0x02
 404:	28 2f       	mov	r18, r24
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	02 2e       	mov	r0, r18
 40e:	02 c0       	rjmp	.+4      	; 0x414 <DIO_voidSetPinValue+0x194>
 410:	88 0f       	add	r24, r24
 412:	99 1f       	adc	r25, r25
 414:	0a 94       	dec	r0
 416:	e2 f7       	brpl	.-8      	; 0x410 <DIO_voidSetPinValue+0x190>
 418:	80 95       	com	r24
 41a:	84 23       	and	r24, r20
 41c:	8c 93       	st	X, r24
 41e:	29 c0       	rjmp	.+82     	; 0x472 <DIO_voidSetPinValue+0x1f2>
			break;
			case DIO_u8PORTC:ClR_BIT(PORTC,Copy_u8Pin);
 420:	a5 e3       	ldi	r26, 0x35	; 53
 422:	b0 e0       	ldi	r27, 0x00	; 0
 424:	e5 e3       	ldi	r30, 0x35	; 53
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	80 81       	ld	r24, Z
 42a:	48 2f       	mov	r20, r24
 42c:	8a 81       	ldd	r24, Y+2	; 0x02
 42e:	28 2f       	mov	r18, r24
 430:	30 e0       	ldi	r19, 0x00	; 0
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	02 2e       	mov	r0, r18
 438:	02 c0       	rjmp	.+4      	; 0x43e <DIO_voidSetPinValue+0x1be>
 43a:	88 0f       	add	r24, r24
 43c:	99 1f       	adc	r25, r25
 43e:	0a 94       	dec	r0
 440:	e2 f7       	brpl	.-8      	; 0x43a <DIO_voidSetPinValue+0x1ba>
 442:	80 95       	com	r24
 444:	84 23       	and	r24, r20
 446:	8c 93       	st	X, r24
 448:	14 c0       	rjmp	.+40     	; 0x472 <DIO_voidSetPinValue+0x1f2>
			break;
			case DIO_u8PORTD:ClR_BIT(PORTD,Copy_u8Pin);
 44a:	a2 e3       	ldi	r26, 0x32	; 50
 44c:	b0 e0       	ldi	r27, 0x00	; 0
 44e:	e2 e3       	ldi	r30, 0x32	; 50
 450:	f0 e0       	ldi	r31, 0x00	; 0
 452:	80 81       	ld	r24, Z
 454:	48 2f       	mov	r20, r24
 456:	8a 81       	ldd	r24, Y+2	; 0x02
 458:	28 2f       	mov	r18, r24
 45a:	30 e0       	ldi	r19, 0x00	; 0
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	02 2e       	mov	r0, r18
 462:	02 c0       	rjmp	.+4      	; 0x468 <DIO_voidSetPinValue+0x1e8>
 464:	88 0f       	add	r24, r24
 466:	99 1f       	adc	r25, r25
 468:	0a 94       	dec	r0
 46a:	e2 f7       	brpl	.-8      	; 0x464 <DIO_voidSetPinValue+0x1e4>
 46c:	80 95       	com	r24
 46e:	84 23       	and	r24, r20
 470:	8c 93       	st	X, r24
			break;
		}
	}
}
 472:	27 96       	adiw	r28, 0x07	; 7
 474:	0f b6       	in	r0, 0x3f	; 63
 476:	f8 94       	cli
 478:	de bf       	out	0x3e, r29	; 62
 47a:	0f be       	out	0x3f, r0	; 63
 47c:	cd bf       	out	0x3d, r28	; 61
 47e:	cf 91       	pop	r28
 480:	df 91       	pop	r29
 482:	08 95       	ret

00000484 <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection(u8 Copy_u8Port , u8 Copy_u8Direction)
{
 484:	df 93       	push	r29
 486:	cf 93       	push	r28
 488:	00 d0       	rcall	.+0      	; 0x48a <DIO_voidSetPortDirection+0x6>
 48a:	00 d0       	rcall	.+0      	; 0x48c <DIO_voidSetPortDirection+0x8>
 48c:	cd b7       	in	r28, 0x3d	; 61
 48e:	de b7       	in	r29, 0x3e	; 62
 490:	89 83       	std	Y+1, r24	; 0x01
 492:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
 494:	89 81       	ldd	r24, Y+1	; 0x01
 496:	28 2f       	mov	r18, r24
 498:	30 e0       	ldi	r19, 0x00	; 0
 49a:	3c 83       	std	Y+4, r19	; 0x04
 49c:	2b 83       	std	Y+3, r18	; 0x03
 49e:	8b 81       	ldd	r24, Y+3	; 0x03
 4a0:	9c 81       	ldd	r25, Y+4	; 0x04
 4a2:	82 30       	cpi	r24, 0x02	; 2
 4a4:	91 05       	cpc	r25, r1
 4a6:	d9 f0       	breq	.+54     	; 0x4de <DIO_voidSetPortDirection+0x5a>
 4a8:	2b 81       	ldd	r18, Y+3	; 0x03
 4aa:	3c 81       	ldd	r19, Y+4	; 0x04
 4ac:	23 30       	cpi	r18, 0x03	; 3
 4ae:	31 05       	cpc	r19, r1
 4b0:	34 f4       	brge	.+12     	; 0x4be <DIO_voidSetPortDirection+0x3a>
 4b2:	8b 81       	ldd	r24, Y+3	; 0x03
 4b4:	9c 81       	ldd	r25, Y+4	; 0x04
 4b6:	81 30       	cpi	r24, 0x01	; 1
 4b8:	91 05       	cpc	r25, r1
 4ba:	61 f0       	breq	.+24     	; 0x4d4 <DIO_voidSetPortDirection+0x50>
 4bc:	1e c0       	rjmp	.+60     	; 0x4fa <DIO_voidSetPortDirection+0x76>
 4be:	2b 81       	ldd	r18, Y+3	; 0x03
 4c0:	3c 81       	ldd	r19, Y+4	; 0x04
 4c2:	23 30       	cpi	r18, 0x03	; 3
 4c4:	31 05       	cpc	r19, r1
 4c6:	81 f0       	breq	.+32     	; 0x4e8 <DIO_voidSetPortDirection+0x64>
 4c8:	8b 81       	ldd	r24, Y+3	; 0x03
 4ca:	9c 81       	ldd	r25, Y+4	; 0x04
 4cc:	84 30       	cpi	r24, 0x04	; 4
 4ce:	91 05       	cpc	r25, r1
 4d0:	81 f0       	breq	.+32     	; 0x4f2 <DIO_voidSetPortDirection+0x6e>
 4d2:	13 c0       	rjmp	.+38     	; 0x4fa <DIO_voidSetPortDirection+0x76>
	{
	case DIO_u8PORTA :
		DDRA = Copy_u8Direction; break;
 4d4:	ea e3       	ldi	r30, 0x3A	; 58
 4d6:	f0 e0       	ldi	r31, 0x00	; 0
 4d8:	8a 81       	ldd	r24, Y+2	; 0x02
 4da:	80 83       	st	Z, r24
 4dc:	0e c0       	rjmp	.+28     	; 0x4fa <DIO_voidSetPortDirection+0x76>
	case DIO_u8PORTB :
			DDRB = Copy_u8Direction; break;
 4de:	e7 e3       	ldi	r30, 0x37	; 55
 4e0:	f0 e0       	ldi	r31, 0x00	; 0
 4e2:	8a 81       	ldd	r24, Y+2	; 0x02
 4e4:	80 83       	st	Z, r24
 4e6:	09 c0       	rjmp	.+18     	; 0x4fa <DIO_voidSetPortDirection+0x76>
	case DIO_u8PORTC :
			DDRC = Copy_u8Direction; break;
 4e8:	e4 e3       	ldi	r30, 0x34	; 52
 4ea:	f0 e0       	ldi	r31, 0x00	; 0
 4ec:	8a 81       	ldd	r24, Y+2	; 0x02
 4ee:	80 83       	st	Z, r24
 4f0:	04 c0       	rjmp	.+8      	; 0x4fa <DIO_voidSetPortDirection+0x76>
	case DIO_u8PORTD :
			DDRD = Copy_u8Direction; break;
 4f2:	e1 e3       	ldi	r30, 0x31	; 49
 4f4:	f0 e0       	ldi	r31, 0x00	; 0
 4f6:	8a 81       	ldd	r24, Y+2	; 0x02
 4f8:	80 83       	st	Z, r24
	}

}
 4fa:	0f 90       	pop	r0
 4fc:	0f 90       	pop	r0
 4fe:	0f 90       	pop	r0
 500:	0f 90       	pop	r0
 502:	cf 91       	pop	r28
 504:	df 91       	pop	r29
 506:	08 95       	ret

00000508 <DIO_voidSetPortValue>:
void DIO_voidSetPortValue(u8 Copy_u8Port , u8 Copy_u8Value)
{
 508:	df 93       	push	r29
 50a:	cf 93       	push	r28
 50c:	00 d0       	rcall	.+0      	; 0x50e <DIO_voidSetPortValue+0x6>
 50e:	00 d0       	rcall	.+0      	; 0x510 <DIO_voidSetPortValue+0x8>
 510:	cd b7       	in	r28, 0x3d	; 61
 512:	de b7       	in	r29, 0x3e	; 62
 514:	89 83       	std	Y+1, r24	; 0x01
 516:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
 518:	89 81       	ldd	r24, Y+1	; 0x01
 51a:	28 2f       	mov	r18, r24
 51c:	30 e0       	ldi	r19, 0x00	; 0
 51e:	3c 83       	std	Y+4, r19	; 0x04
 520:	2b 83       	std	Y+3, r18	; 0x03
 522:	8b 81       	ldd	r24, Y+3	; 0x03
 524:	9c 81       	ldd	r25, Y+4	; 0x04
 526:	82 30       	cpi	r24, 0x02	; 2
 528:	91 05       	cpc	r25, r1
 52a:	d9 f0       	breq	.+54     	; 0x562 <DIO_voidSetPortValue+0x5a>
 52c:	2b 81       	ldd	r18, Y+3	; 0x03
 52e:	3c 81       	ldd	r19, Y+4	; 0x04
 530:	23 30       	cpi	r18, 0x03	; 3
 532:	31 05       	cpc	r19, r1
 534:	34 f4       	brge	.+12     	; 0x542 <DIO_voidSetPortValue+0x3a>
 536:	8b 81       	ldd	r24, Y+3	; 0x03
 538:	9c 81       	ldd	r25, Y+4	; 0x04
 53a:	81 30       	cpi	r24, 0x01	; 1
 53c:	91 05       	cpc	r25, r1
 53e:	61 f0       	breq	.+24     	; 0x558 <DIO_voidSetPortValue+0x50>
 540:	1e c0       	rjmp	.+60     	; 0x57e <DIO_voidSetPortValue+0x76>
 542:	2b 81       	ldd	r18, Y+3	; 0x03
 544:	3c 81       	ldd	r19, Y+4	; 0x04
 546:	23 30       	cpi	r18, 0x03	; 3
 548:	31 05       	cpc	r19, r1
 54a:	81 f0       	breq	.+32     	; 0x56c <DIO_voidSetPortValue+0x64>
 54c:	8b 81       	ldd	r24, Y+3	; 0x03
 54e:	9c 81       	ldd	r25, Y+4	; 0x04
 550:	84 30       	cpi	r24, 0x04	; 4
 552:	91 05       	cpc	r25, r1
 554:	81 f0       	breq	.+32     	; 0x576 <DIO_voidSetPortValue+0x6e>
 556:	13 c0       	rjmp	.+38     	; 0x57e <DIO_voidSetPortValue+0x76>
		{
		case DIO_u8PORTA :
			PORTA = Copy_u8Value; break;
 558:	eb e3       	ldi	r30, 0x3B	; 59
 55a:	f0 e0       	ldi	r31, 0x00	; 0
 55c:	8a 81       	ldd	r24, Y+2	; 0x02
 55e:	80 83       	st	Z, r24
 560:	0e c0       	rjmp	.+28     	; 0x57e <DIO_voidSetPortValue+0x76>
		case DIO_u8PORTB :
			PORTB = Copy_u8Value; break;
 562:	e8 e3       	ldi	r30, 0x38	; 56
 564:	f0 e0       	ldi	r31, 0x00	; 0
 566:	8a 81       	ldd	r24, Y+2	; 0x02
 568:	80 83       	st	Z, r24
 56a:	09 c0       	rjmp	.+18     	; 0x57e <DIO_voidSetPortValue+0x76>
		case DIO_u8PORTC :
			PORTC = Copy_u8Value; break;
 56c:	e5 e3       	ldi	r30, 0x35	; 53
 56e:	f0 e0       	ldi	r31, 0x00	; 0
 570:	8a 81       	ldd	r24, Y+2	; 0x02
 572:	80 83       	st	Z, r24
 574:	04 c0       	rjmp	.+8      	; 0x57e <DIO_voidSetPortValue+0x76>
		case DIO_u8PORTD :
			PORTD = Copy_u8Value; break;
 576:	e2 e3       	ldi	r30, 0x32	; 50
 578:	f0 e0       	ldi	r31, 0x00	; 0
 57a:	8a 81       	ldd	r24, Y+2	; 0x02
 57c:	80 83       	st	Z, r24
		}

}
 57e:	0f 90       	pop	r0
 580:	0f 90       	pop	r0
 582:	0f 90       	pop	r0
 584:	0f 90       	pop	r0
 586:	cf 91       	pop	r28
 588:	df 91       	pop	r29
 58a:	08 95       	ret

0000058c <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin){
 58c:	df 93       	push	r29
 58e:	cf 93       	push	r28
 590:	00 d0       	rcall	.+0      	; 0x592 <DIO_u8GetPinValue+0x6>
 592:	00 d0       	rcall	.+0      	; 0x594 <DIO_u8GetPinValue+0x8>
 594:	0f 92       	push	r0
 596:	cd b7       	in	r28, 0x3d	; 61
 598:	de b7       	in	r29, 0x3e	; 62
 59a:	8a 83       	std	Y+2, r24	; 0x02
 59c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Result;
	switch(Copy_u8Port){
 59e:	8a 81       	ldd	r24, Y+2	; 0x02
 5a0:	28 2f       	mov	r18, r24
 5a2:	30 e0       	ldi	r19, 0x00	; 0
 5a4:	3d 83       	std	Y+5, r19	; 0x05
 5a6:	2c 83       	std	Y+4, r18	; 0x04
 5a8:	4c 81       	ldd	r20, Y+4	; 0x04
 5aa:	5d 81       	ldd	r21, Y+5	; 0x05
 5ac:	42 30       	cpi	r20, 0x02	; 2
 5ae:	51 05       	cpc	r21, r1
 5b0:	41 f1       	breq	.+80     	; 0x602 <DIO_u8GetPinValue+0x76>
 5b2:	8c 81       	ldd	r24, Y+4	; 0x04
 5b4:	9d 81       	ldd	r25, Y+5	; 0x05
 5b6:	83 30       	cpi	r24, 0x03	; 3
 5b8:	91 05       	cpc	r25, r1
 5ba:	34 f4       	brge	.+12     	; 0x5c8 <DIO_u8GetPinValue+0x3c>
 5bc:	2c 81       	ldd	r18, Y+4	; 0x04
 5be:	3d 81       	ldd	r19, Y+5	; 0x05
 5c0:	21 30       	cpi	r18, 0x01	; 1
 5c2:	31 05       	cpc	r19, r1
 5c4:	61 f0       	breq	.+24     	; 0x5de <DIO_u8GetPinValue+0x52>
 5c6:	52 c0       	rjmp	.+164    	; 0x66c <DIO_u8GetPinValue+0xe0>
 5c8:	4c 81       	ldd	r20, Y+4	; 0x04
 5ca:	5d 81       	ldd	r21, Y+5	; 0x05
 5cc:	43 30       	cpi	r20, 0x03	; 3
 5ce:	51 05       	cpc	r21, r1
 5d0:	51 f1       	breq	.+84     	; 0x626 <DIO_u8GetPinValue+0x9a>
 5d2:	8c 81       	ldd	r24, Y+4	; 0x04
 5d4:	9d 81       	ldd	r25, Y+5	; 0x05
 5d6:	84 30       	cpi	r24, 0x04	; 4
 5d8:	91 05       	cpc	r25, r1
 5da:	b9 f1       	breq	.+110    	; 0x64a <DIO_u8GetPinValue+0xbe>
 5dc:	47 c0       	rjmp	.+142    	; 0x66c <DIO_u8GetPinValue+0xe0>
		case DIO_u8PORTA:Local_u8Result=GET_BIT(PINA,Copy_u8Pin);break;
 5de:	e9 e3       	ldi	r30, 0x39	; 57
 5e0:	f0 e0       	ldi	r31, 0x00	; 0
 5e2:	80 81       	ld	r24, Z
 5e4:	28 2f       	mov	r18, r24
 5e6:	30 e0       	ldi	r19, 0x00	; 0
 5e8:	8b 81       	ldd	r24, Y+3	; 0x03
 5ea:	88 2f       	mov	r24, r24
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	a9 01       	movw	r20, r18
 5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <DIO_u8GetPinValue+0x6a>
 5f2:	55 95       	asr	r21
 5f4:	47 95       	ror	r20
 5f6:	8a 95       	dec	r24
 5f8:	e2 f7       	brpl	.-8      	; 0x5f2 <DIO_u8GetPinValue+0x66>
 5fa:	ca 01       	movw	r24, r20
 5fc:	81 70       	andi	r24, 0x01	; 1
 5fe:	89 83       	std	Y+1, r24	; 0x01
 600:	35 c0       	rjmp	.+106    	; 0x66c <DIO_u8GetPinValue+0xe0>
		case DIO_u8PORTB:Local_u8Result=GET_BIT(PINB,Copy_u8Pin);break;
 602:	e6 e3       	ldi	r30, 0x36	; 54
 604:	f0 e0       	ldi	r31, 0x00	; 0
 606:	80 81       	ld	r24, Z
 608:	28 2f       	mov	r18, r24
 60a:	30 e0       	ldi	r19, 0x00	; 0
 60c:	8b 81       	ldd	r24, Y+3	; 0x03
 60e:	88 2f       	mov	r24, r24
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	a9 01       	movw	r20, r18
 614:	02 c0       	rjmp	.+4      	; 0x61a <DIO_u8GetPinValue+0x8e>
 616:	55 95       	asr	r21
 618:	47 95       	ror	r20
 61a:	8a 95       	dec	r24
 61c:	e2 f7       	brpl	.-8      	; 0x616 <DIO_u8GetPinValue+0x8a>
 61e:	ca 01       	movw	r24, r20
 620:	81 70       	andi	r24, 0x01	; 1
 622:	89 83       	std	Y+1, r24	; 0x01
 624:	23 c0       	rjmp	.+70     	; 0x66c <DIO_u8GetPinValue+0xe0>
		case DIO_u8PORTC:Local_u8Result=GET_BIT(PINC,Copy_u8Pin);break;
 626:	e3 e3       	ldi	r30, 0x33	; 51
 628:	f0 e0       	ldi	r31, 0x00	; 0
 62a:	80 81       	ld	r24, Z
 62c:	28 2f       	mov	r18, r24
 62e:	30 e0       	ldi	r19, 0x00	; 0
 630:	8b 81       	ldd	r24, Y+3	; 0x03
 632:	88 2f       	mov	r24, r24
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	a9 01       	movw	r20, r18
 638:	02 c0       	rjmp	.+4      	; 0x63e <DIO_u8GetPinValue+0xb2>
 63a:	55 95       	asr	r21
 63c:	47 95       	ror	r20
 63e:	8a 95       	dec	r24
 640:	e2 f7       	brpl	.-8      	; 0x63a <DIO_u8GetPinValue+0xae>
 642:	ca 01       	movw	r24, r20
 644:	81 70       	andi	r24, 0x01	; 1
 646:	89 83       	std	Y+1, r24	; 0x01
 648:	11 c0       	rjmp	.+34     	; 0x66c <DIO_u8GetPinValue+0xe0>
		case DIO_u8PORTD:Local_u8Result=GET_BIT(PIND,Copy_u8Pin);break;
 64a:	e0 e3       	ldi	r30, 0x30	; 48
 64c:	f0 e0       	ldi	r31, 0x00	; 0
 64e:	80 81       	ld	r24, Z
 650:	28 2f       	mov	r18, r24
 652:	30 e0       	ldi	r19, 0x00	; 0
 654:	8b 81       	ldd	r24, Y+3	; 0x03
 656:	88 2f       	mov	r24, r24
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	a9 01       	movw	r20, r18
 65c:	02 c0       	rjmp	.+4      	; 0x662 <DIO_u8GetPinValue+0xd6>
 65e:	55 95       	asr	r21
 660:	47 95       	ror	r20
 662:	8a 95       	dec	r24
 664:	e2 f7       	brpl	.-8      	; 0x65e <DIO_u8GetPinValue+0xd2>
 666:	ca 01       	movw	r24, r20
 668:	81 70       	andi	r24, 0x01	; 1
 66a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Result;
 66c:	89 81       	ldd	r24, Y+1	; 0x01
}
 66e:	0f 90       	pop	r0
 670:	0f 90       	pop	r0
 672:	0f 90       	pop	r0
 674:	0f 90       	pop	r0
 676:	0f 90       	pop	r0
 678:	cf 91       	pop	r28
 67a:	df 91       	pop	r29
 67c:	08 95       	ret

0000067e <GIE_voidEnable>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_voidEnable(void){
 67e:	df 93       	push	r29
 680:	cf 93       	push	r28
 682:	cd b7       	in	r28, 0x3d	; 61
 684:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
 686:	af e5       	ldi	r26, 0x5F	; 95
 688:	b0 e0       	ldi	r27, 0x00	; 0
 68a:	ef e5       	ldi	r30, 0x5F	; 95
 68c:	f0 e0       	ldi	r31, 0x00	; 0
 68e:	80 81       	ld	r24, Z
 690:	80 68       	ori	r24, 0x80	; 128
 692:	8c 93       	st	X, r24
}
 694:	cf 91       	pop	r28
 696:	df 91       	pop	r29
 698:	08 95       	ret

0000069a <GIE_voidDisable>:

void GIE_voidDisable(void){
 69a:	df 93       	push	r29
 69c:	cf 93       	push	r28
 69e:	cd b7       	in	r28, 0x3d	; 61
 6a0:	de b7       	in	r29, 0x3e	; 62
	ClR_BIT(SREG,7);
 6a2:	af e5       	ldi	r26, 0x5F	; 95
 6a4:	b0 e0       	ldi	r27, 0x00	; 0
 6a6:	ef e5       	ldi	r30, 0x5F	; 95
 6a8:	f0 e0       	ldi	r31, 0x00	; 0
 6aa:	80 81       	ld	r24, Z
 6ac:	8f 77       	andi	r24, 0x7F	; 127
 6ae:	8c 93       	st	X, r24
}
 6b0:	cf 91       	pop	r28
 6b2:	df 91       	pop	r29
 6b4:	08 95       	ret

000006b6 <TIMER0_voidInit>:
#include "TIMER0_interface.h"

void (*TIMER0_CallBack)(void);


void TIMER0_voidInit(void){
 6b6:	df 93       	push	r29
 6b8:	cf 93       	push	r28
 6ba:	cd b7       	in	r28, 0x3d	; 61
 6bc:	de b7       	in	r29, 0x3e	; 62
		ClR_BIT(TCCR0,6);
	#elif(MODE==PWM_PHASECORRECT)
		SET_BIT(TCCR0,6);
		ClR_BIT(TCCR0,3);
	#elif(MODE==CTC)
		SET_BIT(TCCR0,3);
 6be:	a3 e5       	ldi	r26, 0x53	; 83
 6c0:	b0 e0       	ldi	r27, 0x00	; 0
 6c2:	e3 e5       	ldi	r30, 0x53	; 83
 6c4:	f0 e0       	ldi	r31, 0x00	; 0
 6c6:	80 81       	ld	r24, Z
 6c8:	88 60       	ori	r24, 0x08	; 8
 6ca:	8c 93       	st	X, r24
		ClR_BIT(TCCR0,6);
 6cc:	a3 e5       	ldi	r26, 0x53	; 83
 6ce:	b0 e0       	ldi	r27, 0x00	; 0
 6d0:	e3 e5       	ldi	r30, 0x53	; 83
 6d2:	f0 e0       	ldi	r31, 0x00	; 0
 6d4:	80 81       	ld	r24, Z
 6d6:	8f 7b       	andi	r24, 0xBF	; 191
 6d8:	8c 93       	st	X, r24

	/*Compare Match Output Mode*/

	#if(MODE==CTC || MODE==NORMAL)
		#if(Compare_Match_Output_Mode==DISCONNECTED)
				ClR_BIT(TCCR0,4);
 6da:	a3 e5       	ldi	r26, 0x53	; 83
 6dc:	b0 e0       	ldi	r27, 0x00	; 0
 6de:	e3 e5       	ldi	r30, 0x53	; 83
 6e0:	f0 e0       	ldi	r31, 0x00	; 0
 6e2:	80 81       	ld	r24, Z
 6e4:	8f 7e       	andi	r24, 0xEF	; 239
 6e6:	8c 93       	st	X, r24
				ClR_BIT(TCCR0,5);
 6e8:	a3 e5       	ldi	r26, 0x53	; 83
 6ea:	b0 e0       	ldi	r27, 0x00	; 0
 6ec:	e3 e5       	ldi	r30, 0x53	; 83
 6ee:	f0 e0       	ldi	r31, 0x00	; 0
 6f0:	80 81       	ld	r24, Z
 6f2:	8f 7d       	andi	r24, 0xDF	; 223
 6f4:	8c 93       	st	X, r24
	#elif(CLK==CLK_N0PRES)
		SET_BIT(TCCR0,0);
		ClR_BIT(TCCR0,1);
		ClR_BIT(TCCR0,2);
	#elif(CLK==CLK_8)
		ClR_BIT(TCCR0,0);
 6f6:	a3 e5       	ldi	r26, 0x53	; 83
 6f8:	b0 e0       	ldi	r27, 0x00	; 0
 6fa:	e3 e5       	ldi	r30, 0x53	; 83
 6fc:	f0 e0       	ldi	r31, 0x00	; 0
 6fe:	80 81       	ld	r24, Z
 700:	8e 7f       	andi	r24, 0xFE	; 254
 702:	8c 93       	st	X, r24
		SET_BIT(TCCR0,1);
 704:	a3 e5       	ldi	r26, 0x53	; 83
 706:	b0 e0       	ldi	r27, 0x00	; 0
 708:	e3 e5       	ldi	r30, 0x53	; 83
 70a:	f0 e0       	ldi	r31, 0x00	; 0
 70c:	80 81       	ld	r24, Z
 70e:	82 60       	ori	r24, 0x02	; 2
 710:	8c 93       	st	X, r24
		ClR_BIT(TCCR0,2);
 712:	a3 e5       	ldi	r26, 0x53	; 83
 714:	b0 e0       	ldi	r27, 0x00	; 0
 716:	e3 e5       	ldi	r30, 0x53	; 83
 718:	f0 e0       	ldi	r31, 0x00	; 0
 71a:	80 81       	ld	r24, Z
 71c:	8b 7f       	andi	r24, 0xFB	; 251
 71e:	8c 93       	st	X, r24
		SET_BIT(TCCR0,2);
	#endif

	/*Interrupt enable*/
	#if(MODE==CTC)
		SET_BIT(TIMSK,1);
 720:	a9 e5       	ldi	r26, 0x59	; 89
 722:	b0 e0       	ldi	r27, 0x00	; 0
 724:	e9 e5       	ldi	r30, 0x59	; 89
 726:	f0 e0       	ldi	r31, 0x00	; 0
 728:	80 81       	ld	r24, Z
 72a:	82 60       	ori	r24, 0x02	; 2
 72c:	8c 93       	st	X, r24
	#elif(MODE==NORMAL)
		SET_BIT(TIMSK,0);
	#endif
}
 72e:	cf 91       	pop	r28
 730:	df 91       	pop	r29
 732:	08 95       	ret

00000734 <TIMER0_voidSetCallBack>:
void TIMER0_voidSetCallBack(void (*Copy_pvCallBack)(void)){
 734:	df 93       	push	r29
 736:	cf 93       	push	r28
 738:	00 d0       	rcall	.+0      	; 0x73a <TIMER0_voidSetCallBack+0x6>
 73a:	cd b7       	in	r28, 0x3d	; 61
 73c:	de b7       	in	r29, 0x3e	; 62
 73e:	9a 83       	std	Y+2, r25	; 0x02
 740:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_CallBack=Copy_pvCallBack;
 742:	89 81       	ldd	r24, Y+1	; 0x01
 744:	9a 81       	ldd	r25, Y+2	; 0x02
 746:	90 93 64 00 	sts	0x0064, r25
 74a:	80 93 63 00 	sts	0x0063, r24
}
 74e:	0f 90       	pop	r0
 750:	0f 90       	pop	r0
 752:	cf 91       	pop	r28
 754:	df 91       	pop	r29
 756:	08 95       	ret

00000758 <__vector_10>:
#if(MODE==CTC)
	void __vector_10(void) __attribute__((signal));
	void __vector_10(void){
 758:	1f 92       	push	r1
 75a:	0f 92       	push	r0
 75c:	0f b6       	in	r0, 0x3f	; 63
 75e:	0f 92       	push	r0
 760:	11 24       	eor	r1, r1
 762:	2f 93       	push	r18
 764:	3f 93       	push	r19
 766:	4f 93       	push	r20
 768:	5f 93       	push	r21
 76a:	6f 93       	push	r22
 76c:	7f 93       	push	r23
 76e:	8f 93       	push	r24
 770:	9f 93       	push	r25
 772:	af 93       	push	r26
 774:	bf 93       	push	r27
 776:	ef 93       	push	r30
 778:	ff 93       	push	r31
 77a:	df 93       	push	r29
 77c:	cf 93       	push	r28
 77e:	cd b7       	in	r28, 0x3d	; 61
 780:	de b7       	in	r29, 0x3e	; 62
		TIMER0_CallBack();
 782:	e0 91 63 00 	lds	r30, 0x0063
 786:	f0 91 64 00 	lds	r31, 0x0064
 78a:	09 95       	icall
	}
 78c:	cf 91       	pop	r28
 78e:	df 91       	pop	r29
 790:	ff 91       	pop	r31
 792:	ef 91       	pop	r30
 794:	bf 91       	pop	r27
 796:	af 91       	pop	r26
 798:	9f 91       	pop	r25
 79a:	8f 91       	pop	r24
 79c:	7f 91       	pop	r23
 79e:	6f 91       	pop	r22
 7a0:	5f 91       	pop	r21
 7a2:	4f 91       	pop	r20
 7a4:	3f 91       	pop	r19
 7a6:	2f 91       	pop	r18
 7a8:	0f 90       	pop	r0
 7aa:	0f be       	out	0x3f, r0	; 63
 7ac:	0f 90       	pop	r0
 7ae:	1f 90       	pop	r1
 7b0:	18 95       	reti

000007b2 <TIMER0_SETOCR>:
	void __vector_11(void) __attribute__((signal));
	void __vector_11(void){
		TIMER0_CallBack();
	}
#endif
void TIMER0_SETOCR(u8 Copy_u8Val){
 7b2:	df 93       	push	r29
 7b4:	cf 93       	push	r28
 7b6:	0f 92       	push	r0
 7b8:	cd b7       	in	r28, 0x3d	; 61
 7ba:	de b7       	in	r29, 0x3e	; 62
 7bc:	89 83       	std	Y+1, r24	; 0x01
	OCR0=Copy_u8Val;
 7be:	ec e5       	ldi	r30, 0x5C	; 92
 7c0:	f0 e0       	ldi	r31, 0x00	; 0
 7c2:	89 81       	ldd	r24, Y+1	; 0x01
 7c4:	80 83       	st	Z, r24
}
 7c6:	0f 90       	pop	r0
 7c8:	cf 91       	pop	r28
 7ca:	df 91       	pop	r29
 7cc:	08 95       	ret

000007ce <TIMER0_SETTCNT>:
void TIMER0_SETTCNT(u8 Copy_u8Val){
 7ce:	df 93       	push	r29
 7d0:	cf 93       	push	r28
 7d2:	0f 92       	push	r0
 7d4:	cd b7       	in	r28, 0x3d	; 61
 7d6:	de b7       	in	r29, 0x3e	; 62
 7d8:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=Copy_u8Val;
 7da:	e2 e5       	ldi	r30, 0x52	; 82
 7dc:	f0 e0       	ldi	r31, 0x00	; 0
 7de:	89 81       	ldd	r24, Y+1	; 0x01
 7e0:	80 83       	st	Z, r24
}
 7e2:	0f 90       	pop	r0
 7e4:	cf 91       	pop	r28
 7e6:	df 91       	pop	r29
 7e8:	08 95       	ret

000007ea <main>:
#include "DIO_interface.h"
#include "GIE_interface.h"
#include "TIMER0_interface.h"
void Toggle_Led(void);

int main(void){
 7ea:	df 93       	push	r29
 7ec:	cf 93       	push	r28
 7ee:	cd b7       	in	r28, 0x3d	; 61
 7f0:	de b7       	in	r29, 0x3e	; 62
		TIMER0_voidInit();
		TIMER0_SETOCR(220); //by increasing ocr, Ton increased
	*/

	//Test code for CTC Mode,and also for Normal but without calling TIMER0_SETOCR(250)
		DIO_voidSetPinDir(DIO_u8PORTA,0,DIO_u8OUTPUT);
 7f2:	81 e0       	ldi	r24, 0x01	; 1
 7f4:	60 e0       	ldi	r22, 0x00	; 0
 7f6:	41 e0       	ldi	r20, 0x01	; 1
 7f8:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_voidSetPinDir>
		GIE_voidEnable();
 7fc:	0e 94 3f 03 	call	0x67e	; 0x67e <GIE_voidEnable>
		TIMER0_voidInit();
 800:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <TIMER0_voidInit>
		TIMER0_voidSetCallBack(Toggle_Led);
 804:	8a e0       	ldi	r24, 0x0A	; 10
 806:	94 e0       	ldi	r25, 0x04	; 4
 808:	0e 94 9a 03 	call	0x734	; 0x734 <TIMER0_voidSetCallBack>
		TIMER0_SETOCR(250);
 80c:	8a ef       	ldi	r24, 0xFA	; 250
 80e:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <TIMER0_SETOCR>
 812:	ff cf       	rjmp	.-2      	; 0x812 <main+0x28>

00000814 <Toggle_Led>:

	while(1){
	}
}
void Toggle_Led(void){
 814:	df 93       	push	r29
 816:	cf 93       	push	r28
 818:	cd b7       	in	r28, 0x3d	; 61
 81a:	de b7       	in	r29, 0x3e	; 62
	static u16 counter=0;
	static u8 result=0;
	counter++;
 81c:	80 91 61 00 	lds	r24, 0x0061
 820:	90 91 62 00 	lds	r25, 0x0062
 824:	01 96       	adiw	r24, 0x01	; 1
 826:	90 93 62 00 	sts	0x0062, r25
 82a:	80 93 61 00 	sts	0x0061, r24
 82e:	11 c0       	rjmp	.+34     	; 0x852 <Toggle_Led+0x3e>
	while(counter==4000){
		TOGGLE_BIT(result,0);
 830:	90 91 60 00 	lds	r25, 0x0060
 834:	81 e0       	ldi	r24, 0x01	; 1
 836:	89 27       	eor	r24, r25
 838:	80 93 60 00 	sts	0x0060, r24
		DIO_voidSetPinValue(DIO_u8PORTA,0,result);
 83c:	90 91 60 00 	lds	r25, 0x0060
 840:	81 e0       	ldi	r24, 0x01	; 1
 842:	60 e0       	ldi	r22, 0x00	; 0
 844:	49 2f       	mov	r20, r25
 846:	0e 94 40 01 	call	0x280	; 0x280 <DIO_voidSetPinValue>
		counter=0;
 84a:	10 92 62 00 	sts	0x0062, r1
 84e:	10 92 61 00 	sts	0x0061, r1
}
void Toggle_Led(void){
	static u16 counter=0;
	static u8 result=0;
	counter++;
	while(counter==4000){
 852:	80 91 61 00 	lds	r24, 0x0061
 856:	90 91 62 00 	lds	r25, 0x0062
 85a:	2f e0       	ldi	r18, 0x0F	; 15
 85c:	80 3a       	cpi	r24, 0xA0	; 160
 85e:	92 07       	cpc	r25, r18
 860:	39 f3       	breq	.-50     	; 0x830 <Toggle_Led+0x1c>
		TOGGLE_BIT(result,0);
		DIO_voidSetPinValue(DIO_u8PORTA,0,result);
		counter=0;
	}
}
 862:	cf 91       	pop	r28
 864:	df 91       	pop	r29
 866:	08 95       	ret

00000868 <_exit>:
 868:	f8 94       	cli

0000086a <__stop_program>:
 86a:	ff cf       	rjmp	.-2      	; 0x86a <__stop_program>
