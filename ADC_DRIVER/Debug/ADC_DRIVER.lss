
ADC_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         0000081c  00000000  00000000  000007f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000443  00000000  00000000  00001014  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 a1 03 	call	0x742	; 0x742 <main>
  64:	0c 94 d0 03 	jmp	0x7a0	; 0x7a0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ADC_voidInit>:
#include "ADC_interface.h"




void ADC_voidInit(void){
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	/*Select VREF Mode*/
	#if(VREF==AREF)
		CLR_BIT(ADMUX,7);
		CLR_BIT(ADMUX,6);
	#elif(VREF==AVCC)
		SET_BIT(ADMUX,6);
  74:	a7 e2       	ldi	r26, 0x27	; 39
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	e7 e2       	ldi	r30, 0x27	; 39
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	80 64       	ori	r24, 0x40	; 64
  80:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,7);
  82:	a7 e2       	ldi	r26, 0x27	; 39
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e7 e2       	ldi	r30, 0x27	; 39
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	8f 77       	andi	r24, 0x7F	; 127
  8e:	8c 93       	st	X, r24
		SET_BIT(ADMUX,7);
	#endif

	/*Prescaler-Bits*/
	#if(ADC_PRESCALER==PRES_2)
		CLR_BIT(ADCSRA,2);
  90:	a6 e2       	ldi	r26, 0x26	; 38
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	e6 e2       	ldi	r30, 0x26	; 38
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	8b 7f       	andi	r24, 0xFB	; 251
  9c:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA,1);
  9e:	a6 e2       	ldi	r26, 0x26	; 38
  a0:	b0 e0       	ldi	r27, 0x00	; 0
  a2:	e6 e2       	ldi	r30, 0x26	; 38
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	8d 7f       	andi	r24, 0xFD	; 253
  aa:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA,0);
  ac:	a6 e2       	ldi	r26, 0x26	; 38
  ae:	b0 e0       	ldi	r27, 0x00	; 0
  b0:	e6 e2       	ldi	r30, 0x26	; 38
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	8e 7f       	andi	r24, 0xFE	; 254
  b8:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,1);
		SET_BIT(ADCSRA,0);
	#endif

	/*ADC ENABLE BIT*/
	SET_BIT(ADCSRA,7);
  ba:	a6 e2       	ldi	r26, 0x26	; 38
  bc:	b0 e0       	ldi	r27, 0x00	; 0
  be:	e6 e2       	ldi	r30, 0x26	; 38
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	80 68       	ori	r24, 0x80	; 128
  c6:	8c 93       	st	X, r24

	/*Interupt enable*/
	#if(METHOD==INTERUTPT)
		SET_BIT(ADCSRA,3);
	#elif(METHOD==POLLING)
		CLR_BIT(ADCSRA,3);
  c8:	a6 e2       	ldi	r26, 0x26	; 38
  ca:	b0 e0       	ldi	r27, 0x00	; 0
  cc:	e6 e2       	ldi	r30, 0x26	; 38
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	87 7f       	andi	r24, 0xF7	; 247
  d4:	8c 93       	st	X, r24
	#endif
}
  d6:	cf 91       	pop	r28
  d8:	df 91       	pop	r29
  da:	08 95       	ret

000000dc <ADC_voidStartConversion>:
u16 ADC_voidStartConversion(u8 Copy_u8Channel){
  dc:	df 93       	push	r29
  de:	cf 93       	push	r28
  e0:	0f 92       	push	r0
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
  e6:	89 83       	std	Y+1, r24	; 0x01
	ADMUX&=0b11110000;
  e8:	a7 e2       	ldi	r26, 0x27	; 39
  ea:	b0 e0       	ldi	r27, 0x00	; 0
  ec:	e7 e2       	ldi	r30, 0x27	; 39
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	80 7f       	andi	r24, 0xF0	; 240
  f4:	8c 93       	st	X, r24
	ADMUX|=Copy_u8Channel;
  f6:	a7 e2       	ldi	r26, 0x27	; 39
  f8:	b0 e0       	ldi	r27, 0x00	; 0
  fa:	e7 e2       	ldi	r30, 0x27	; 39
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	90 81       	ld	r25, Z
 100:	89 81       	ldd	r24, Y+1	; 0x01
 102:	89 2b       	or	r24, r25
 104:	8c 93       	st	X, r24
	/*start-conversion method*/
	#if(CONVERSION_METHOD==ADC_START_CONVERSION_METHOD)
		SET_BIT(ADCSRA,6);
 106:	a6 e2       	ldi	r26, 0x26	; 38
 108:	b0 e0       	ldi	r27, 0x00	; 0
 10a:	e6 e2       	ldi	r30, 0x26	; 38
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	80 64       	ori	r24, 0x40	; 64
 112:	8c 93       	st	X, r24
 114:	01 c0       	rjmp	.+2      	; 0x118 <ADC_voidStartConversion+0x3c>
	#elif(CONVERSION_METHOD==ADC_AUTO_TRIGGER_METHOD)
		SET_BIT(ADCSRA,5);
	#endif

	while(GET_BIT(ADCSRA,4)==0){
		asm("NOP");
 116:	00 00       	nop
		SET_BIT(ADCSRA,6);
	#elif(CONVERSION_METHOD==ADC_AUTO_TRIGGER_METHOD)
		SET_BIT(ADCSRA,5);
	#endif

	while(GET_BIT(ADCSRA,4)==0){
 118:	e6 e2       	ldi	r30, 0x26	; 38
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	82 95       	swap	r24
 120:	8f 70       	andi	r24, 0x0F	; 15
 122:	88 2f       	mov	r24, r24
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	81 70       	andi	r24, 0x01	; 1
 128:	90 70       	andi	r25, 0x00	; 0
 12a:	00 97       	sbiw	r24, 0x00	; 0
 12c:	a1 f3       	breq	.-24     	; 0x116 <ADC_voidStartConversion+0x3a>
		asm("NOP");
	}
	SET_BIT(ADCSRA,4);
 12e:	a6 e2       	ldi	r26, 0x26	; 38
 130:	b0 e0       	ldi	r27, 0x00	; 0
 132:	e6 e2       	ldi	r30, 0x26	; 38
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	80 61       	ori	r24, 0x10	; 16
 13a:	8c 93       	st	X, r24
	return ADC;
 13c:	e4 e2       	ldi	r30, 0x24	; 36
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	91 81       	ldd	r25, Z+1	; 0x01
}
 144:	0f 90       	pop	r0
 146:	cf 91       	pop	r28
 148:	df 91       	pop	r29
 14a:	08 95       	ret

0000014c <DIO_voidSetPinDir>:
#include "DIO_register.h"
#include "DIO_private.h"
#include "DIO_config.h"
#include "DIO_interface.h"

void DIO_voidSetPinDir(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Dir){
 14c:	df 93       	push	r29
 14e:	cf 93       	push	r28
 150:	cd b7       	in	r28, 0x3d	; 61
 152:	de b7       	in	r29, 0x3e	; 62
 154:	27 97       	sbiw	r28, 0x07	; 7
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	f8 94       	cli
 15a:	de bf       	out	0x3e, r29	; 62
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	cd bf       	out	0x3d, r28	; 61
 160:	89 83       	std	Y+1, r24	; 0x01
 162:	6a 83       	std	Y+2, r22	; 0x02
 164:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Dir==DIO_u8OUTPUT){
 166:	8b 81       	ldd	r24, Y+3	; 0x03
 168:	81 30       	cpi	r24, 0x01	; 1
 16a:	09 f0       	breq	.+2      	; 0x16e <DIO_voidSetPinDir+0x22>
 16c:	6f c0       	rjmp	.+222    	; 0x24c <DIO_voidSetPinDir+0x100>
		switch(Copy_u8Port){
 16e:	89 81       	ldd	r24, Y+1	; 0x01
 170:	28 2f       	mov	r18, r24
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	3f 83       	std	Y+7, r19	; 0x07
 176:	2e 83       	std	Y+6, r18	; 0x06
 178:	8e 81       	ldd	r24, Y+6	; 0x06
 17a:	9f 81       	ldd	r25, Y+7	; 0x07
 17c:	81 30       	cpi	r24, 0x01	; 1
 17e:	91 05       	cpc	r25, r1
 180:	49 f1       	breq	.+82     	; 0x1d4 <DIO_voidSetPinDir+0x88>
 182:	2e 81       	ldd	r18, Y+6	; 0x06
 184:	3f 81       	ldd	r19, Y+7	; 0x07
 186:	22 30       	cpi	r18, 0x02	; 2
 188:	31 05       	cpc	r19, r1
 18a:	2c f4       	brge	.+10     	; 0x196 <DIO_voidSetPinDir+0x4a>
 18c:	8e 81       	ldd	r24, Y+6	; 0x06
 18e:	9f 81       	ldd	r25, Y+7	; 0x07
 190:	00 97       	sbiw	r24, 0x00	; 0
 192:	61 f0       	breq	.+24     	; 0x1ac <DIO_voidSetPinDir+0x60>
 194:	d2 c0       	rjmp	.+420    	; 0x33a <DIO_voidSetPinDir+0x1ee>
 196:	2e 81       	ldd	r18, Y+6	; 0x06
 198:	3f 81       	ldd	r19, Y+7	; 0x07
 19a:	22 30       	cpi	r18, 0x02	; 2
 19c:	31 05       	cpc	r19, r1
 19e:	71 f1       	breq	.+92     	; 0x1fc <DIO_voidSetPinDir+0xb0>
 1a0:	8e 81       	ldd	r24, Y+6	; 0x06
 1a2:	9f 81       	ldd	r25, Y+7	; 0x07
 1a4:	83 30       	cpi	r24, 0x03	; 3
 1a6:	91 05       	cpc	r25, r1
 1a8:	e9 f1       	breq	.+122    	; 0x224 <DIO_voidSetPinDir+0xd8>
 1aa:	c7 c0       	rjmp	.+398    	; 0x33a <DIO_voidSetPinDir+0x1ee>
			case DIO_u8PORTA:SET_BIT(DDRA,Copy_u8Pin);break;
 1ac:	aa e3       	ldi	r26, 0x3A	; 58
 1ae:	b0 e0       	ldi	r27, 0x00	; 0
 1b0:	ea e3       	ldi	r30, 0x3A	; 58
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	80 81       	ld	r24, Z
 1b6:	48 2f       	mov	r20, r24
 1b8:	8a 81       	ldd	r24, Y+2	; 0x02
 1ba:	28 2f       	mov	r18, r24
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	02 2e       	mov	r0, r18
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_voidSetPinDir+0x7e>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	0a 94       	dec	r0
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_voidSetPinDir+0x7a>
 1ce:	84 2b       	or	r24, r20
 1d0:	8c 93       	st	X, r24
 1d2:	b3 c0       	rjmp	.+358    	; 0x33a <DIO_voidSetPinDir+0x1ee>
			case DIO_u8PORTB:SET_BIT(DDRB,Copy_u8Pin);break;
 1d4:	a7 e3       	ldi	r26, 0x37	; 55
 1d6:	b0 e0       	ldi	r27, 0x00	; 0
 1d8:	e7 e3       	ldi	r30, 0x37	; 55
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	48 2f       	mov	r20, r24
 1e0:	8a 81       	ldd	r24, Y+2	; 0x02
 1e2:	28 2f       	mov	r18, r24
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 2e       	mov	r0, r18
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_voidSetPinDir+0xa6>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	0a 94       	dec	r0
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_voidSetPinDir+0xa2>
 1f6:	84 2b       	or	r24, r20
 1f8:	8c 93       	st	X, r24
 1fa:	9f c0       	rjmp	.+318    	; 0x33a <DIO_voidSetPinDir+0x1ee>
			case DIO_u8PORTC:SET_BIT(DDRC,Copy_u8Pin);break;
 1fc:	a4 e3       	ldi	r26, 0x34	; 52
 1fe:	b0 e0       	ldi	r27, 0x00	; 0
 200:	e4 e3       	ldi	r30, 0x34	; 52
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	48 2f       	mov	r20, r24
 208:	8a 81       	ldd	r24, Y+2	; 0x02
 20a:	28 2f       	mov	r18, r24
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	02 2e       	mov	r0, r18
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_voidSetPinDir+0xce>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	0a 94       	dec	r0
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_voidSetPinDir+0xca>
 21e:	84 2b       	or	r24, r20
 220:	8c 93       	st	X, r24
 222:	8b c0       	rjmp	.+278    	; 0x33a <DIO_voidSetPinDir+0x1ee>
			case DIO_u8PORTD:SET_BIT(DDRD,Copy_u8Pin);break;
 224:	a1 e3       	ldi	r26, 0x31	; 49
 226:	b0 e0       	ldi	r27, 0x00	; 0
 228:	e1 e3       	ldi	r30, 0x31	; 49
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	80 81       	ld	r24, Z
 22e:	48 2f       	mov	r20, r24
 230:	8a 81       	ldd	r24, Y+2	; 0x02
 232:	28 2f       	mov	r18, r24
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	02 2e       	mov	r0, r18
 23c:	02 c0       	rjmp	.+4      	; 0x242 <DIO_voidSetPinDir+0xf6>
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	0a 94       	dec	r0
 244:	e2 f7       	brpl	.-8      	; 0x23e <DIO_voidSetPinDir+0xf2>
 246:	84 2b       	or	r24, r20
 248:	8c 93       	st	X, r24
 24a:	77 c0       	rjmp	.+238    	; 0x33a <DIO_voidSetPinDir+0x1ee>
		}
	}
	else if(Copy_u8Dir==DIO_u8INPUT){
 24c:	8b 81       	ldd	r24, Y+3	; 0x03
 24e:	88 23       	and	r24, r24
 250:	09 f0       	breq	.+2      	; 0x254 <DIO_voidSetPinDir+0x108>
 252:	73 c0       	rjmp	.+230    	; 0x33a <DIO_voidSetPinDir+0x1ee>
		switch(Copy_u8Port){
 254:	89 81       	ldd	r24, Y+1	; 0x01
 256:	28 2f       	mov	r18, r24
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	3d 83       	std	Y+5, r19	; 0x05
 25c:	2c 83       	std	Y+4, r18	; 0x04
 25e:	8c 81       	ldd	r24, Y+4	; 0x04
 260:	9d 81       	ldd	r25, Y+5	; 0x05
 262:	81 30       	cpi	r24, 0x01	; 1
 264:	91 05       	cpc	r25, r1
 266:	59 f1       	breq	.+86     	; 0x2be <DIO_voidSetPinDir+0x172>
 268:	2c 81       	ldd	r18, Y+4	; 0x04
 26a:	3d 81       	ldd	r19, Y+5	; 0x05
 26c:	22 30       	cpi	r18, 0x02	; 2
 26e:	31 05       	cpc	r19, r1
 270:	2c f4       	brge	.+10     	; 0x27c <DIO_voidSetPinDir+0x130>
 272:	8c 81       	ldd	r24, Y+4	; 0x04
 274:	9d 81       	ldd	r25, Y+5	; 0x05
 276:	00 97       	sbiw	r24, 0x00	; 0
 278:	69 f0       	breq	.+26     	; 0x294 <DIO_voidSetPinDir+0x148>
 27a:	5f c0       	rjmp	.+190    	; 0x33a <DIO_voidSetPinDir+0x1ee>
 27c:	2c 81       	ldd	r18, Y+4	; 0x04
 27e:	3d 81       	ldd	r19, Y+5	; 0x05
 280:	22 30       	cpi	r18, 0x02	; 2
 282:	31 05       	cpc	r19, r1
 284:	89 f1       	breq	.+98     	; 0x2e8 <DIO_voidSetPinDir+0x19c>
 286:	8c 81       	ldd	r24, Y+4	; 0x04
 288:	9d 81       	ldd	r25, Y+5	; 0x05
 28a:	83 30       	cpi	r24, 0x03	; 3
 28c:	91 05       	cpc	r25, r1
 28e:	09 f4       	brne	.+2      	; 0x292 <DIO_voidSetPinDir+0x146>
 290:	40 c0       	rjmp	.+128    	; 0x312 <DIO_voidSetPinDir+0x1c6>
 292:	53 c0       	rjmp	.+166    	; 0x33a <DIO_voidSetPinDir+0x1ee>
			case DIO_u8PORTA:CLR_BIT(DDRA,Copy_u8Pin);break;
 294:	aa e3       	ldi	r26, 0x3A	; 58
 296:	b0 e0       	ldi	r27, 0x00	; 0
 298:	ea e3       	ldi	r30, 0x3A	; 58
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	80 81       	ld	r24, Z
 29e:	48 2f       	mov	r20, r24
 2a0:	8a 81       	ldd	r24, Y+2	; 0x02
 2a2:	28 2f       	mov	r18, r24
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	02 2e       	mov	r0, r18
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <DIO_voidSetPinDir+0x166>
 2ae:	88 0f       	add	r24, r24
 2b0:	99 1f       	adc	r25, r25
 2b2:	0a 94       	dec	r0
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <DIO_voidSetPinDir+0x162>
 2b6:	80 95       	com	r24
 2b8:	84 23       	and	r24, r20
 2ba:	8c 93       	st	X, r24
 2bc:	3e c0       	rjmp	.+124    	; 0x33a <DIO_voidSetPinDir+0x1ee>
			case DIO_u8PORTB:CLR_BIT(DDRB,Copy_u8Pin);break;
 2be:	a7 e3       	ldi	r26, 0x37	; 55
 2c0:	b0 e0       	ldi	r27, 0x00	; 0
 2c2:	e7 e3       	ldi	r30, 0x37	; 55
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	80 81       	ld	r24, Z
 2c8:	48 2f       	mov	r20, r24
 2ca:	8a 81       	ldd	r24, Y+2	; 0x02
 2cc:	28 2f       	mov	r18, r24
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	02 2e       	mov	r0, r18
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <DIO_voidSetPinDir+0x190>
 2d8:	88 0f       	add	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	0a 94       	dec	r0
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <DIO_voidSetPinDir+0x18c>
 2e0:	80 95       	com	r24
 2e2:	84 23       	and	r24, r20
 2e4:	8c 93       	st	X, r24
 2e6:	29 c0       	rjmp	.+82     	; 0x33a <DIO_voidSetPinDir+0x1ee>
			case DIO_u8PORTC:CLR_BIT(DDRC,Copy_u8Pin);break;
 2e8:	a4 e3       	ldi	r26, 0x34	; 52
 2ea:	b0 e0       	ldi	r27, 0x00	; 0
 2ec:	e4 e3       	ldi	r30, 0x34	; 52
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	80 81       	ld	r24, Z
 2f2:	48 2f       	mov	r20, r24
 2f4:	8a 81       	ldd	r24, Y+2	; 0x02
 2f6:	28 2f       	mov	r18, r24
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	02 2e       	mov	r0, r18
 300:	02 c0       	rjmp	.+4      	; 0x306 <DIO_voidSetPinDir+0x1ba>
 302:	88 0f       	add	r24, r24
 304:	99 1f       	adc	r25, r25
 306:	0a 94       	dec	r0
 308:	e2 f7       	brpl	.-8      	; 0x302 <DIO_voidSetPinDir+0x1b6>
 30a:	80 95       	com	r24
 30c:	84 23       	and	r24, r20
 30e:	8c 93       	st	X, r24
 310:	14 c0       	rjmp	.+40     	; 0x33a <DIO_voidSetPinDir+0x1ee>
			case DIO_u8PORTD:CLR_BIT(DDRD,Copy_u8Pin);break;
 312:	a1 e3       	ldi	r26, 0x31	; 49
 314:	b0 e0       	ldi	r27, 0x00	; 0
 316:	e1 e3       	ldi	r30, 0x31	; 49
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	80 81       	ld	r24, Z
 31c:	48 2f       	mov	r20, r24
 31e:	8a 81       	ldd	r24, Y+2	; 0x02
 320:	28 2f       	mov	r18, r24
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	02 2e       	mov	r0, r18
 32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_voidSetPinDir+0x1e4>
 32c:	88 0f       	add	r24, r24
 32e:	99 1f       	adc	r25, r25
 330:	0a 94       	dec	r0
 332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_voidSetPinDir+0x1e0>
 334:	80 95       	com	r24
 336:	84 23       	and	r24, r20
 338:	8c 93       	st	X, r24
		}
	}
}
 33a:	27 96       	adiw	r28, 0x07	; 7
 33c:	0f b6       	in	r0, 0x3f	; 63
 33e:	f8 94       	cli
 340:	de bf       	out	0x3e, r29	; 62
 342:	0f be       	out	0x3f, r0	; 63
 344:	cd bf       	out	0x3d, r28	; 61
 346:	cf 91       	pop	r28
 348:	df 91       	pop	r29
 34a:	08 95       	ret

0000034c <DIO_voidSetPinValue>:
void DIO_voidSetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value){
 34c:	df 93       	push	r29
 34e:	cf 93       	push	r28
 350:	cd b7       	in	r28, 0x3d	; 61
 352:	de b7       	in	r29, 0x3e	; 62
 354:	27 97       	sbiw	r28, 0x07	; 7
 356:	0f b6       	in	r0, 0x3f	; 63
 358:	f8 94       	cli
 35a:	de bf       	out	0x3e, r29	; 62
 35c:	0f be       	out	0x3f, r0	; 63
 35e:	cd bf       	out	0x3d, r28	; 61
 360:	89 83       	std	Y+1, r24	; 0x01
 362:	6a 83       	std	Y+2, r22	; 0x02
 364:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Value==DIO_u8HIGH){
 366:	8b 81       	ldd	r24, Y+3	; 0x03
 368:	81 30       	cpi	r24, 0x01	; 1
 36a:	09 f0       	breq	.+2      	; 0x36e <DIO_voidSetPinValue+0x22>
 36c:	6f c0       	rjmp	.+222    	; 0x44c <DIO_voidSetPinValue+0x100>
		switch(Copy_u8Port){
 36e:	89 81       	ldd	r24, Y+1	; 0x01
 370:	28 2f       	mov	r18, r24
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	3f 83       	std	Y+7, r19	; 0x07
 376:	2e 83       	std	Y+6, r18	; 0x06
 378:	8e 81       	ldd	r24, Y+6	; 0x06
 37a:	9f 81       	ldd	r25, Y+7	; 0x07
 37c:	81 30       	cpi	r24, 0x01	; 1
 37e:	91 05       	cpc	r25, r1
 380:	49 f1       	breq	.+82     	; 0x3d4 <DIO_voidSetPinValue+0x88>
 382:	2e 81       	ldd	r18, Y+6	; 0x06
 384:	3f 81       	ldd	r19, Y+7	; 0x07
 386:	22 30       	cpi	r18, 0x02	; 2
 388:	31 05       	cpc	r19, r1
 38a:	2c f4       	brge	.+10     	; 0x396 <DIO_voidSetPinValue+0x4a>
 38c:	8e 81       	ldd	r24, Y+6	; 0x06
 38e:	9f 81       	ldd	r25, Y+7	; 0x07
 390:	00 97       	sbiw	r24, 0x00	; 0
 392:	61 f0       	breq	.+24     	; 0x3ac <DIO_voidSetPinValue+0x60>
 394:	d2 c0       	rjmp	.+420    	; 0x53a <DIO_voidSetPinValue+0x1ee>
 396:	2e 81       	ldd	r18, Y+6	; 0x06
 398:	3f 81       	ldd	r19, Y+7	; 0x07
 39a:	22 30       	cpi	r18, 0x02	; 2
 39c:	31 05       	cpc	r19, r1
 39e:	71 f1       	breq	.+92     	; 0x3fc <DIO_voidSetPinValue+0xb0>
 3a0:	8e 81       	ldd	r24, Y+6	; 0x06
 3a2:	9f 81       	ldd	r25, Y+7	; 0x07
 3a4:	83 30       	cpi	r24, 0x03	; 3
 3a6:	91 05       	cpc	r25, r1
 3a8:	e9 f1       	breq	.+122    	; 0x424 <DIO_voidSetPinValue+0xd8>
 3aa:	c7 c0       	rjmp	.+398    	; 0x53a <DIO_voidSetPinValue+0x1ee>
			case DIO_u8PORTA:SET_BIT(PORTA,Copy_u8Pin);break;
 3ac:	ab e3       	ldi	r26, 0x3B	; 59
 3ae:	b0 e0       	ldi	r27, 0x00	; 0
 3b0:	eb e3       	ldi	r30, 0x3B	; 59
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	80 81       	ld	r24, Z
 3b6:	48 2f       	mov	r20, r24
 3b8:	8a 81       	ldd	r24, Y+2	; 0x02
 3ba:	28 2f       	mov	r18, r24
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	02 2e       	mov	r0, r18
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <DIO_voidSetPinValue+0x7e>
 3c6:	88 0f       	add	r24, r24
 3c8:	99 1f       	adc	r25, r25
 3ca:	0a 94       	dec	r0
 3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <DIO_voidSetPinValue+0x7a>
 3ce:	84 2b       	or	r24, r20
 3d0:	8c 93       	st	X, r24
 3d2:	b3 c0       	rjmp	.+358    	; 0x53a <DIO_voidSetPinValue+0x1ee>
			case DIO_u8PORTB:SET_BIT(PORTB,Copy_u8Pin);break;
 3d4:	a8 e3       	ldi	r26, 0x38	; 56
 3d6:	b0 e0       	ldi	r27, 0x00	; 0
 3d8:	e8 e3       	ldi	r30, 0x38	; 56
 3da:	f0 e0       	ldi	r31, 0x00	; 0
 3dc:	80 81       	ld	r24, Z
 3de:	48 2f       	mov	r20, r24
 3e0:	8a 81       	ldd	r24, Y+2	; 0x02
 3e2:	28 2f       	mov	r18, r24
 3e4:	30 e0       	ldi	r19, 0x00	; 0
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	02 2e       	mov	r0, r18
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <DIO_voidSetPinValue+0xa6>
 3ee:	88 0f       	add	r24, r24
 3f0:	99 1f       	adc	r25, r25
 3f2:	0a 94       	dec	r0
 3f4:	e2 f7       	brpl	.-8      	; 0x3ee <DIO_voidSetPinValue+0xa2>
 3f6:	84 2b       	or	r24, r20
 3f8:	8c 93       	st	X, r24
 3fa:	9f c0       	rjmp	.+318    	; 0x53a <DIO_voidSetPinValue+0x1ee>
			case DIO_u8PORTC:SET_BIT(PORTC,Copy_u8Pin);break;
 3fc:	a5 e3       	ldi	r26, 0x35	; 53
 3fe:	b0 e0       	ldi	r27, 0x00	; 0
 400:	e5 e3       	ldi	r30, 0x35	; 53
 402:	f0 e0       	ldi	r31, 0x00	; 0
 404:	80 81       	ld	r24, Z
 406:	48 2f       	mov	r20, r24
 408:	8a 81       	ldd	r24, Y+2	; 0x02
 40a:	28 2f       	mov	r18, r24
 40c:	30 e0       	ldi	r19, 0x00	; 0
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	02 2e       	mov	r0, r18
 414:	02 c0       	rjmp	.+4      	; 0x41a <DIO_voidSetPinValue+0xce>
 416:	88 0f       	add	r24, r24
 418:	99 1f       	adc	r25, r25
 41a:	0a 94       	dec	r0
 41c:	e2 f7       	brpl	.-8      	; 0x416 <DIO_voidSetPinValue+0xca>
 41e:	84 2b       	or	r24, r20
 420:	8c 93       	st	X, r24
 422:	8b c0       	rjmp	.+278    	; 0x53a <DIO_voidSetPinValue+0x1ee>
			case DIO_u8PORTD:SET_BIT(PORTD,Copy_u8Pin);break;
 424:	a2 e3       	ldi	r26, 0x32	; 50
 426:	b0 e0       	ldi	r27, 0x00	; 0
 428:	e2 e3       	ldi	r30, 0x32	; 50
 42a:	f0 e0       	ldi	r31, 0x00	; 0
 42c:	80 81       	ld	r24, Z
 42e:	48 2f       	mov	r20, r24
 430:	8a 81       	ldd	r24, Y+2	; 0x02
 432:	28 2f       	mov	r18, r24
 434:	30 e0       	ldi	r19, 0x00	; 0
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	02 2e       	mov	r0, r18
 43c:	02 c0       	rjmp	.+4      	; 0x442 <DIO_voidSetPinValue+0xf6>
 43e:	88 0f       	add	r24, r24
 440:	99 1f       	adc	r25, r25
 442:	0a 94       	dec	r0
 444:	e2 f7       	brpl	.-8      	; 0x43e <DIO_voidSetPinValue+0xf2>
 446:	84 2b       	or	r24, r20
 448:	8c 93       	st	X, r24
 44a:	77 c0       	rjmp	.+238    	; 0x53a <DIO_voidSetPinValue+0x1ee>
		}
	}
	else if(Copy_u8Value==DIO_u8LOW){
 44c:	8b 81       	ldd	r24, Y+3	; 0x03
 44e:	88 23       	and	r24, r24
 450:	09 f0       	breq	.+2      	; 0x454 <DIO_voidSetPinValue+0x108>
 452:	73 c0       	rjmp	.+230    	; 0x53a <DIO_voidSetPinValue+0x1ee>
		switch(Copy_u8Port){
 454:	89 81       	ldd	r24, Y+1	; 0x01
 456:	28 2f       	mov	r18, r24
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	3d 83       	std	Y+5, r19	; 0x05
 45c:	2c 83       	std	Y+4, r18	; 0x04
 45e:	8c 81       	ldd	r24, Y+4	; 0x04
 460:	9d 81       	ldd	r25, Y+5	; 0x05
 462:	81 30       	cpi	r24, 0x01	; 1
 464:	91 05       	cpc	r25, r1
 466:	59 f1       	breq	.+86     	; 0x4be <DIO_voidSetPinValue+0x172>
 468:	2c 81       	ldd	r18, Y+4	; 0x04
 46a:	3d 81       	ldd	r19, Y+5	; 0x05
 46c:	22 30       	cpi	r18, 0x02	; 2
 46e:	31 05       	cpc	r19, r1
 470:	2c f4       	brge	.+10     	; 0x47c <DIO_voidSetPinValue+0x130>
 472:	8c 81       	ldd	r24, Y+4	; 0x04
 474:	9d 81       	ldd	r25, Y+5	; 0x05
 476:	00 97       	sbiw	r24, 0x00	; 0
 478:	69 f0       	breq	.+26     	; 0x494 <DIO_voidSetPinValue+0x148>
 47a:	5f c0       	rjmp	.+190    	; 0x53a <DIO_voidSetPinValue+0x1ee>
 47c:	2c 81       	ldd	r18, Y+4	; 0x04
 47e:	3d 81       	ldd	r19, Y+5	; 0x05
 480:	22 30       	cpi	r18, 0x02	; 2
 482:	31 05       	cpc	r19, r1
 484:	89 f1       	breq	.+98     	; 0x4e8 <DIO_voidSetPinValue+0x19c>
 486:	8c 81       	ldd	r24, Y+4	; 0x04
 488:	9d 81       	ldd	r25, Y+5	; 0x05
 48a:	83 30       	cpi	r24, 0x03	; 3
 48c:	91 05       	cpc	r25, r1
 48e:	09 f4       	brne	.+2      	; 0x492 <DIO_voidSetPinValue+0x146>
 490:	40 c0       	rjmp	.+128    	; 0x512 <DIO_voidSetPinValue+0x1c6>
 492:	53 c0       	rjmp	.+166    	; 0x53a <DIO_voidSetPinValue+0x1ee>
			case DIO_u8PORTA:CLR_BIT(PORTA,Copy_u8Pin);break;
 494:	ab e3       	ldi	r26, 0x3B	; 59
 496:	b0 e0       	ldi	r27, 0x00	; 0
 498:	eb e3       	ldi	r30, 0x3B	; 59
 49a:	f0 e0       	ldi	r31, 0x00	; 0
 49c:	80 81       	ld	r24, Z
 49e:	48 2f       	mov	r20, r24
 4a0:	8a 81       	ldd	r24, Y+2	; 0x02
 4a2:	28 2f       	mov	r18, r24
 4a4:	30 e0       	ldi	r19, 0x00	; 0
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	02 2e       	mov	r0, r18
 4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <DIO_voidSetPinValue+0x166>
 4ae:	88 0f       	add	r24, r24
 4b0:	99 1f       	adc	r25, r25
 4b2:	0a 94       	dec	r0
 4b4:	e2 f7       	brpl	.-8      	; 0x4ae <DIO_voidSetPinValue+0x162>
 4b6:	80 95       	com	r24
 4b8:	84 23       	and	r24, r20
 4ba:	8c 93       	st	X, r24
 4bc:	3e c0       	rjmp	.+124    	; 0x53a <DIO_voidSetPinValue+0x1ee>
			case DIO_u8PORTB:CLR_BIT(PORTB,Copy_u8Pin);break;
 4be:	a8 e3       	ldi	r26, 0x38	; 56
 4c0:	b0 e0       	ldi	r27, 0x00	; 0
 4c2:	e8 e3       	ldi	r30, 0x38	; 56
 4c4:	f0 e0       	ldi	r31, 0x00	; 0
 4c6:	80 81       	ld	r24, Z
 4c8:	48 2f       	mov	r20, r24
 4ca:	8a 81       	ldd	r24, Y+2	; 0x02
 4cc:	28 2f       	mov	r18, r24
 4ce:	30 e0       	ldi	r19, 0x00	; 0
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	02 2e       	mov	r0, r18
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <DIO_voidSetPinValue+0x190>
 4d8:	88 0f       	add	r24, r24
 4da:	99 1f       	adc	r25, r25
 4dc:	0a 94       	dec	r0
 4de:	e2 f7       	brpl	.-8      	; 0x4d8 <DIO_voidSetPinValue+0x18c>
 4e0:	80 95       	com	r24
 4e2:	84 23       	and	r24, r20
 4e4:	8c 93       	st	X, r24
 4e6:	29 c0       	rjmp	.+82     	; 0x53a <DIO_voidSetPinValue+0x1ee>
			case DIO_u8PORTC:CLR_BIT(PORTC,Copy_u8Pin);break;
 4e8:	a5 e3       	ldi	r26, 0x35	; 53
 4ea:	b0 e0       	ldi	r27, 0x00	; 0
 4ec:	e5 e3       	ldi	r30, 0x35	; 53
 4ee:	f0 e0       	ldi	r31, 0x00	; 0
 4f0:	80 81       	ld	r24, Z
 4f2:	48 2f       	mov	r20, r24
 4f4:	8a 81       	ldd	r24, Y+2	; 0x02
 4f6:	28 2f       	mov	r18, r24
 4f8:	30 e0       	ldi	r19, 0x00	; 0
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	02 2e       	mov	r0, r18
 500:	02 c0       	rjmp	.+4      	; 0x506 <DIO_voidSetPinValue+0x1ba>
 502:	88 0f       	add	r24, r24
 504:	99 1f       	adc	r25, r25
 506:	0a 94       	dec	r0
 508:	e2 f7       	brpl	.-8      	; 0x502 <DIO_voidSetPinValue+0x1b6>
 50a:	80 95       	com	r24
 50c:	84 23       	and	r24, r20
 50e:	8c 93       	st	X, r24
 510:	14 c0       	rjmp	.+40     	; 0x53a <DIO_voidSetPinValue+0x1ee>
			case DIO_u8PORTD:CLR_BIT(PORTD,Copy_u8Pin);break;
 512:	a2 e3       	ldi	r26, 0x32	; 50
 514:	b0 e0       	ldi	r27, 0x00	; 0
 516:	e2 e3       	ldi	r30, 0x32	; 50
 518:	f0 e0       	ldi	r31, 0x00	; 0
 51a:	80 81       	ld	r24, Z
 51c:	48 2f       	mov	r20, r24
 51e:	8a 81       	ldd	r24, Y+2	; 0x02
 520:	28 2f       	mov	r18, r24
 522:	30 e0       	ldi	r19, 0x00	; 0
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	02 2e       	mov	r0, r18
 52a:	02 c0       	rjmp	.+4      	; 0x530 <DIO_voidSetPinValue+0x1e4>
 52c:	88 0f       	add	r24, r24
 52e:	99 1f       	adc	r25, r25
 530:	0a 94       	dec	r0
 532:	e2 f7       	brpl	.-8      	; 0x52c <DIO_voidSetPinValue+0x1e0>
 534:	80 95       	com	r24
 536:	84 23       	and	r24, r20
 538:	8c 93       	st	X, r24
		}
	}
}
 53a:	27 96       	adiw	r28, 0x07	; 7
 53c:	0f b6       	in	r0, 0x3f	; 63
 53e:	f8 94       	cli
 540:	de bf       	out	0x3e, r29	; 62
 542:	0f be       	out	0x3f, r0	; 63
 544:	cd bf       	out	0x3d, r28	; 61
 546:	cf 91       	pop	r28
 548:	df 91       	pop	r29
 54a:	08 95       	ret

0000054c <DIO_voidSetPortDir>:
void DIO_voidSetPortDir(u8 Copy_u8Port,u8 Copy_u8Dir){
 54c:	df 93       	push	r29
 54e:	cf 93       	push	r28
 550:	00 d0       	rcall	.+0      	; 0x552 <DIO_voidSetPortDir+0x6>
 552:	00 d0       	rcall	.+0      	; 0x554 <DIO_voidSetPortDir+0x8>
 554:	cd b7       	in	r28, 0x3d	; 61
 556:	de b7       	in	r29, 0x3e	; 62
 558:	89 83       	std	Y+1, r24	; 0x01
 55a:	6a 83       	std	Y+2, r22	; 0x02
		switch(Copy_u8Port){
 55c:	89 81       	ldd	r24, Y+1	; 0x01
 55e:	28 2f       	mov	r18, r24
 560:	30 e0       	ldi	r19, 0x00	; 0
 562:	3c 83       	std	Y+4, r19	; 0x04
 564:	2b 83       	std	Y+3, r18	; 0x03
 566:	8b 81       	ldd	r24, Y+3	; 0x03
 568:	9c 81       	ldd	r25, Y+4	; 0x04
 56a:	81 30       	cpi	r24, 0x01	; 1
 56c:	91 05       	cpc	r25, r1
 56e:	d1 f0       	breq	.+52     	; 0x5a4 <DIO_voidSetPortDir+0x58>
 570:	2b 81       	ldd	r18, Y+3	; 0x03
 572:	3c 81       	ldd	r19, Y+4	; 0x04
 574:	22 30       	cpi	r18, 0x02	; 2
 576:	31 05       	cpc	r19, r1
 578:	2c f4       	brge	.+10     	; 0x584 <DIO_voidSetPortDir+0x38>
 57a:	8b 81       	ldd	r24, Y+3	; 0x03
 57c:	9c 81       	ldd	r25, Y+4	; 0x04
 57e:	00 97       	sbiw	r24, 0x00	; 0
 580:	61 f0       	breq	.+24     	; 0x59a <DIO_voidSetPortDir+0x4e>
 582:	1e c0       	rjmp	.+60     	; 0x5c0 <DIO_voidSetPortDir+0x74>
 584:	2b 81       	ldd	r18, Y+3	; 0x03
 586:	3c 81       	ldd	r19, Y+4	; 0x04
 588:	22 30       	cpi	r18, 0x02	; 2
 58a:	31 05       	cpc	r19, r1
 58c:	81 f0       	breq	.+32     	; 0x5ae <DIO_voidSetPortDir+0x62>
 58e:	8b 81       	ldd	r24, Y+3	; 0x03
 590:	9c 81       	ldd	r25, Y+4	; 0x04
 592:	83 30       	cpi	r24, 0x03	; 3
 594:	91 05       	cpc	r25, r1
 596:	81 f0       	breq	.+32     	; 0x5b8 <DIO_voidSetPortDir+0x6c>
 598:	13 c0       	rjmp	.+38     	; 0x5c0 <DIO_voidSetPortDir+0x74>
			case DIO_u8PORTA:DDRA=Copy_u8Dir;break;
 59a:	ea e3       	ldi	r30, 0x3A	; 58
 59c:	f0 e0       	ldi	r31, 0x00	; 0
 59e:	8a 81       	ldd	r24, Y+2	; 0x02
 5a0:	80 83       	st	Z, r24
 5a2:	0e c0       	rjmp	.+28     	; 0x5c0 <DIO_voidSetPortDir+0x74>
			case DIO_u8PORTB:DDRB=Copy_u8Dir;break;
 5a4:	e7 e3       	ldi	r30, 0x37	; 55
 5a6:	f0 e0       	ldi	r31, 0x00	; 0
 5a8:	8a 81       	ldd	r24, Y+2	; 0x02
 5aa:	80 83       	st	Z, r24
 5ac:	09 c0       	rjmp	.+18     	; 0x5c0 <DIO_voidSetPortDir+0x74>
			case DIO_u8PORTC:DDRC=Copy_u8Dir;break;
 5ae:	e4 e3       	ldi	r30, 0x34	; 52
 5b0:	f0 e0       	ldi	r31, 0x00	; 0
 5b2:	8a 81       	ldd	r24, Y+2	; 0x02
 5b4:	80 83       	st	Z, r24
 5b6:	04 c0       	rjmp	.+8      	; 0x5c0 <DIO_voidSetPortDir+0x74>
			case DIO_u8PORTD:DDRD=Copy_u8Dir;break;
 5b8:	e1 e3       	ldi	r30, 0x31	; 49
 5ba:	f0 e0       	ldi	r31, 0x00	; 0
 5bc:	8a 81       	ldd	r24, Y+2	; 0x02
 5be:	80 83       	st	Z, r24
		}
}
 5c0:	0f 90       	pop	r0
 5c2:	0f 90       	pop	r0
 5c4:	0f 90       	pop	r0
 5c6:	0f 90       	pop	r0
 5c8:	cf 91       	pop	r28
 5ca:	df 91       	pop	r29
 5cc:	08 95       	ret

000005ce <DIO_voidSetPortValue>:
void DIO_voidSetPortValue(u8 Copy_u8Port,u8 Copy_u8Value){
 5ce:	df 93       	push	r29
 5d0:	cf 93       	push	r28
 5d2:	00 d0       	rcall	.+0      	; 0x5d4 <DIO_voidSetPortValue+0x6>
 5d4:	00 d0       	rcall	.+0      	; 0x5d6 <DIO_voidSetPortValue+0x8>
 5d6:	cd b7       	in	r28, 0x3d	; 61
 5d8:	de b7       	in	r29, 0x3e	; 62
 5da:	89 83       	std	Y+1, r24	; 0x01
 5dc:	6a 83       	std	Y+2, r22	; 0x02
		switch(Copy_u8Port){
 5de:	89 81       	ldd	r24, Y+1	; 0x01
 5e0:	28 2f       	mov	r18, r24
 5e2:	30 e0       	ldi	r19, 0x00	; 0
 5e4:	3c 83       	std	Y+4, r19	; 0x04
 5e6:	2b 83       	std	Y+3, r18	; 0x03
 5e8:	8b 81       	ldd	r24, Y+3	; 0x03
 5ea:	9c 81       	ldd	r25, Y+4	; 0x04
 5ec:	81 30       	cpi	r24, 0x01	; 1
 5ee:	91 05       	cpc	r25, r1
 5f0:	d1 f0       	breq	.+52     	; 0x626 <DIO_voidSetPortValue+0x58>
 5f2:	2b 81       	ldd	r18, Y+3	; 0x03
 5f4:	3c 81       	ldd	r19, Y+4	; 0x04
 5f6:	22 30       	cpi	r18, 0x02	; 2
 5f8:	31 05       	cpc	r19, r1
 5fa:	2c f4       	brge	.+10     	; 0x606 <DIO_voidSetPortValue+0x38>
 5fc:	8b 81       	ldd	r24, Y+3	; 0x03
 5fe:	9c 81       	ldd	r25, Y+4	; 0x04
 600:	00 97       	sbiw	r24, 0x00	; 0
 602:	61 f0       	breq	.+24     	; 0x61c <DIO_voidSetPortValue+0x4e>
 604:	1e c0       	rjmp	.+60     	; 0x642 <DIO_voidSetPortValue+0x74>
 606:	2b 81       	ldd	r18, Y+3	; 0x03
 608:	3c 81       	ldd	r19, Y+4	; 0x04
 60a:	22 30       	cpi	r18, 0x02	; 2
 60c:	31 05       	cpc	r19, r1
 60e:	81 f0       	breq	.+32     	; 0x630 <DIO_voidSetPortValue+0x62>
 610:	8b 81       	ldd	r24, Y+3	; 0x03
 612:	9c 81       	ldd	r25, Y+4	; 0x04
 614:	83 30       	cpi	r24, 0x03	; 3
 616:	91 05       	cpc	r25, r1
 618:	81 f0       	breq	.+32     	; 0x63a <DIO_voidSetPortValue+0x6c>
 61a:	13 c0       	rjmp	.+38     	; 0x642 <DIO_voidSetPortValue+0x74>
			case DIO_u8PORTA:PORTA=Copy_u8Value;break;
 61c:	eb e3       	ldi	r30, 0x3B	; 59
 61e:	f0 e0       	ldi	r31, 0x00	; 0
 620:	8a 81       	ldd	r24, Y+2	; 0x02
 622:	80 83       	st	Z, r24
 624:	0e c0       	rjmp	.+28     	; 0x642 <DIO_voidSetPortValue+0x74>
			case DIO_u8PORTB:PORTB=Copy_u8Value;break;
 626:	e8 e3       	ldi	r30, 0x38	; 56
 628:	f0 e0       	ldi	r31, 0x00	; 0
 62a:	8a 81       	ldd	r24, Y+2	; 0x02
 62c:	80 83       	st	Z, r24
 62e:	09 c0       	rjmp	.+18     	; 0x642 <DIO_voidSetPortValue+0x74>
			case DIO_u8PORTC:PORTC=Copy_u8Value;break;
 630:	e5 e3       	ldi	r30, 0x35	; 53
 632:	f0 e0       	ldi	r31, 0x00	; 0
 634:	8a 81       	ldd	r24, Y+2	; 0x02
 636:	80 83       	st	Z, r24
 638:	04 c0       	rjmp	.+8      	; 0x642 <DIO_voidSetPortValue+0x74>
			case DIO_u8PORTD:PORTD=Copy_u8Value;break;
 63a:	e2 e3       	ldi	r30, 0x32	; 50
 63c:	f0 e0       	ldi	r31, 0x00	; 0
 63e:	8a 81       	ldd	r24, Y+2	; 0x02
 640:	80 83       	st	Z, r24
		}
}
 642:	0f 90       	pop	r0
 644:	0f 90       	pop	r0
 646:	0f 90       	pop	r0
 648:	0f 90       	pop	r0
 64a:	cf 91       	pop	r28
 64c:	df 91       	pop	r29
 64e:	08 95       	ret

00000650 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin){
 650:	df 93       	push	r29
 652:	cf 93       	push	r28
 654:	00 d0       	rcall	.+0      	; 0x656 <DIO_u8GetPinValue+0x6>
 656:	00 d0       	rcall	.+0      	; 0x658 <DIO_u8GetPinValue+0x8>
 658:	0f 92       	push	r0
 65a:	cd b7       	in	r28, 0x3d	; 61
 65c:	de b7       	in	r29, 0x3e	; 62
 65e:	8a 83       	std	Y+2, r24	; 0x02
 660:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_result;
	switch(Copy_u8Port){
 662:	8a 81       	ldd	r24, Y+2	; 0x02
 664:	28 2f       	mov	r18, r24
 666:	30 e0       	ldi	r19, 0x00	; 0
 668:	3d 83       	std	Y+5, r19	; 0x05
 66a:	2c 83       	std	Y+4, r18	; 0x04
 66c:	4c 81       	ldd	r20, Y+4	; 0x04
 66e:	5d 81       	ldd	r21, Y+5	; 0x05
 670:	41 30       	cpi	r20, 0x01	; 1
 672:	51 05       	cpc	r21, r1
 674:	41 f1       	breq	.+80     	; 0x6c6 <DIO_u8GetPinValue+0x76>
 676:	8c 81       	ldd	r24, Y+4	; 0x04
 678:	9d 81       	ldd	r25, Y+5	; 0x05
 67a:	82 30       	cpi	r24, 0x02	; 2
 67c:	91 05       	cpc	r25, r1
 67e:	34 f4       	brge	.+12     	; 0x68c <DIO_u8GetPinValue+0x3c>
 680:	2c 81       	ldd	r18, Y+4	; 0x04
 682:	3d 81       	ldd	r19, Y+5	; 0x05
 684:	21 15       	cp	r18, r1
 686:	31 05       	cpc	r19, r1
 688:	61 f0       	breq	.+24     	; 0x6a2 <DIO_u8GetPinValue+0x52>
 68a:	52 c0       	rjmp	.+164    	; 0x730 <DIO_u8GetPinValue+0xe0>
 68c:	4c 81       	ldd	r20, Y+4	; 0x04
 68e:	5d 81       	ldd	r21, Y+5	; 0x05
 690:	42 30       	cpi	r20, 0x02	; 2
 692:	51 05       	cpc	r21, r1
 694:	51 f1       	breq	.+84     	; 0x6ea <DIO_u8GetPinValue+0x9a>
 696:	8c 81       	ldd	r24, Y+4	; 0x04
 698:	9d 81       	ldd	r25, Y+5	; 0x05
 69a:	83 30       	cpi	r24, 0x03	; 3
 69c:	91 05       	cpc	r25, r1
 69e:	b9 f1       	breq	.+110    	; 0x70e <DIO_u8GetPinValue+0xbe>
 6a0:	47 c0       	rjmp	.+142    	; 0x730 <DIO_u8GetPinValue+0xe0>
		case DIO_u8PORTA:Local_result=GET_BIT(PINA,Copy_u8Pin);break;
 6a2:	e9 e3       	ldi	r30, 0x39	; 57
 6a4:	f0 e0       	ldi	r31, 0x00	; 0
 6a6:	80 81       	ld	r24, Z
 6a8:	28 2f       	mov	r18, r24
 6aa:	30 e0       	ldi	r19, 0x00	; 0
 6ac:	8b 81       	ldd	r24, Y+3	; 0x03
 6ae:	88 2f       	mov	r24, r24
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	a9 01       	movw	r20, r18
 6b4:	02 c0       	rjmp	.+4      	; 0x6ba <DIO_u8GetPinValue+0x6a>
 6b6:	55 95       	asr	r21
 6b8:	47 95       	ror	r20
 6ba:	8a 95       	dec	r24
 6bc:	e2 f7       	brpl	.-8      	; 0x6b6 <DIO_u8GetPinValue+0x66>
 6be:	ca 01       	movw	r24, r20
 6c0:	81 70       	andi	r24, 0x01	; 1
 6c2:	89 83       	std	Y+1, r24	; 0x01
 6c4:	35 c0       	rjmp	.+106    	; 0x730 <DIO_u8GetPinValue+0xe0>
		case DIO_u8PORTB:Local_result=GET_BIT(PINB,Copy_u8Pin);break;
 6c6:	e6 e3       	ldi	r30, 0x36	; 54
 6c8:	f0 e0       	ldi	r31, 0x00	; 0
 6ca:	80 81       	ld	r24, Z
 6cc:	28 2f       	mov	r18, r24
 6ce:	30 e0       	ldi	r19, 0x00	; 0
 6d0:	8b 81       	ldd	r24, Y+3	; 0x03
 6d2:	88 2f       	mov	r24, r24
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	a9 01       	movw	r20, r18
 6d8:	02 c0       	rjmp	.+4      	; 0x6de <DIO_u8GetPinValue+0x8e>
 6da:	55 95       	asr	r21
 6dc:	47 95       	ror	r20
 6de:	8a 95       	dec	r24
 6e0:	e2 f7       	brpl	.-8      	; 0x6da <DIO_u8GetPinValue+0x8a>
 6e2:	ca 01       	movw	r24, r20
 6e4:	81 70       	andi	r24, 0x01	; 1
 6e6:	89 83       	std	Y+1, r24	; 0x01
 6e8:	23 c0       	rjmp	.+70     	; 0x730 <DIO_u8GetPinValue+0xe0>
		case DIO_u8PORTC:Local_result=GET_BIT(PINC,Copy_u8Pin);break;
 6ea:	e3 e3       	ldi	r30, 0x33	; 51
 6ec:	f0 e0       	ldi	r31, 0x00	; 0
 6ee:	80 81       	ld	r24, Z
 6f0:	28 2f       	mov	r18, r24
 6f2:	30 e0       	ldi	r19, 0x00	; 0
 6f4:	8b 81       	ldd	r24, Y+3	; 0x03
 6f6:	88 2f       	mov	r24, r24
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	a9 01       	movw	r20, r18
 6fc:	02 c0       	rjmp	.+4      	; 0x702 <DIO_u8GetPinValue+0xb2>
 6fe:	55 95       	asr	r21
 700:	47 95       	ror	r20
 702:	8a 95       	dec	r24
 704:	e2 f7       	brpl	.-8      	; 0x6fe <DIO_u8GetPinValue+0xae>
 706:	ca 01       	movw	r24, r20
 708:	81 70       	andi	r24, 0x01	; 1
 70a:	89 83       	std	Y+1, r24	; 0x01
 70c:	11 c0       	rjmp	.+34     	; 0x730 <DIO_u8GetPinValue+0xe0>
		case DIO_u8PORTD:Local_result=GET_BIT(PIND,Copy_u8Pin);break;
 70e:	e0 e3       	ldi	r30, 0x30	; 48
 710:	f0 e0       	ldi	r31, 0x00	; 0
 712:	80 81       	ld	r24, Z
 714:	28 2f       	mov	r18, r24
 716:	30 e0       	ldi	r19, 0x00	; 0
 718:	8b 81       	ldd	r24, Y+3	; 0x03
 71a:	88 2f       	mov	r24, r24
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	a9 01       	movw	r20, r18
 720:	02 c0       	rjmp	.+4      	; 0x726 <DIO_u8GetPinValue+0xd6>
 722:	55 95       	asr	r21
 724:	47 95       	ror	r20
 726:	8a 95       	dec	r24
 728:	e2 f7       	brpl	.-8      	; 0x722 <DIO_u8GetPinValue+0xd2>
 72a:	ca 01       	movw	r24, r20
 72c:	81 70       	andi	r24, 0x01	; 1
 72e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_result;
 730:	89 81       	ldd	r24, Y+1	; 0x01
}
 732:	0f 90       	pop	r0
 734:	0f 90       	pop	r0
 736:	0f 90       	pop	r0
 738:	0f 90       	pop	r0
 73a:	0f 90       	pop	r0
 73c:	cf 91       	pop	r28
 73e:	df 91       	pop	r29
 740:	08 95       	ret

00000742 <main>:
 */
#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "DIO_interface.h"
#include "ADC_interface.h"
int main(void){
 742:	df 93       	push	r29
 744:	cf 93       	push	r28
 746:	00 d0       	rcall	.+0      	; 0x748 <main+0x6>
 748:	cd b7       	in	r28, 0x3d	; 61
 74a:	de b7       	in	r29, 0x3e	; 62
	u16 reading;
	//Connected to potentiometer
	DIO_voidSetPinDir(DIO_u8PORTA,0,DIO_u8INPUT);
 74c:	80 e0       	ldi	r24, 0x00	; 0
 74e:	60 e0       	ldi	r22, 0x00	; 0
 750:	40 e0       	ldi	r20, 0x00	; 0
 752:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_voidSetPinDir>
	//connected to led
	DIO_voidSetPortDir(DIO_u8PORTD,0b11111111);
 756:	83 e0       	ldi	r24, 0x03	; 3
 758:	6f ef       	ldi	r22, 0xFF	; 255
 75a:	0e 94 a6 02 	call	0x54c	; 0x54c <DIO_voidSetPortDir>
	ADC_voidInit();
 75e:	0e 94 36 00 	call	0x6c	; 0x6c <ADC_voidInit>
	while(1){
		reading=ADC_voidStartConversion(0);
 762:	80 e0       	ldi	r24, 0x00	; 0
 764:	0e 94 6e 00 	call	0xdc	; 0xdc <ADC_voidStartConversion>
 768:	9a 83       	std	Y+2, r25	; 0x02
 76a:	89 83       	std	Y+1, r24	; 0x01
		if(reading<200){
 76c:	89 81       	ldd	r24, Y+1	; 0x01
 76e:	9a 81       	ldd	r25, Y+2	; 0x02
 770:	88 3c       	cpi	r24, 0xC8	; 200
 772:	91 05       	cpc	r25, r1
 774:	28 f4       	brcc	.+10     	; 0x780 <main+0x3e>
			DIO_voidSetPortValue(DIO_u8PORTD,0b00000000);
 776:	83 e0       	ldi	r24, 0x03	; 3
 778:	60 e0       	ldi	r22, 0x00	; 0
 77a:	0e 94 e7 02 	call	0x5ce	; 0x5ce <DIO_voidSetPortValue>
 77e:	f1 cf       	rjmp	.-30     	; 0x762 <main+0x20>
		}
		else if(reading<700){
 780:	89 81       	ldd	r24, Y+1	; 0x01
 782:	9a 81       	ldd	r25, Y+2	; 0x02
 784:	22 e0       	ldi	r18, 0x02	; 2
 786:	8c 3b       	cpi	r24, 0xBC	; 188
 788:	92 07       	cpc	r25, r18
 78a:	28 f4       	brcc	.+10     	; 0x796 <main+0x54>
			DIO_voidSetPortValue(DIO_u8PORTD,0b00001111);
 78c:	83 e0       	ldi	r24, 0x03	; 3
 78e:	6f e0       	ldi	r22, 0x0F	; 15
 790:	0e 94 e7 02 	call	0x5ce	; 0x5ce <DIO_voidSetPortValue>
 794:	e6 cf       	rjmp	.-52     	; 0x762 <main+0x20>
		}
		else{
			DIO_voidSetPortValue(DIO_u8PORTD,0b11111111);
 796:	83 e0       	ldi	r24, 0x03	; 3
 798:	6f ef       	ldi	r22, 0xFF	; 255
 79a:	0e 94 e7 02 	call	0x5ce	; 0x5ce <DIO_voidSetPortValue>
 79e:	e1 cf       	rjmp	.-62     	; 0x762 <main+0x20>

000007a0 <_exit>:
 7a0:	f8 94       	cli

000007a2 <__stop_program>:
 7a2:	ff cf       	rjmp	.-2      	; 0x7a2 <__stop_program>
